import{_ as e,c as l,o as i,a}from"./app.e5db1f59.js";const g=JSON.parse('{"title":"二进制的逻辑运算","description":"","frontmatter":{"title":"二进制的逻辑运算","date":"2022-07-10T19:49:46.000Z","tags":["二进制","逻辑运算"]},"headers":[{"level":2,"title":"逻辑或","slug":"逻辑或","link":"#逻辑或","children":[]},{"level":2,"title":"逻辑与","slug":"逻辑与","link":"#逻辑与","children":[]},{"level":2,"title":"逻辑非","slug":"逻辑非","link":"#逻辑非","children":[]},{"level":2,"title":"异或","slug":"异或","link":"#异或","children":[]}],"relativePath":"工作区/算法/二进制的逻辑运算.md"}'),t={name:"工作区/算法/二进制的逻辑运算.md"},r=a('<p>#逻辑运算</p><h1 id="二进制的逻辑运算的笔记" tabindex="-1">二进制的逻辑运算的笔记 <a class="header-anchor" href="#二进制的逻辑运算的笔记" aria-hidden="true">#</a></h1><h2 id="逻辑或" tabindex="-1">逻辑或 <a class="header-anchor" href="#逻辑或" aria-hidden="true">#</a></h2><p><strong>又称为逻辑加，可用符号“+”或“∨”来表示。逻辑“或”运算的规则如下：</strong></p><ul><li>0+0=0或0∨0=0</li><li>0+1=1或0∨1=1</li><li>1+0=1或1∨0=1</li><li>1+1=1或1∨1=1</li></ul><p>可见，两个相“或”的逻辑变量中，只要有一个为1，“或”运算的结果就为1。仅当两个变量都为0时，或运算的结果才为0。计算时，要特别注意和算术运算的加法加以区别。</p><h2 id="逻辑与" tabindex="-1">逻辑与 <a class="header-anchor" href="#逻辑与" aria-hidden="true">#</a></h2><p><strong>又称为逻辑乘，常用符号“×”或“· ”或“∧”表示。“与”运算遵循如下运算规则：</strong></p><ul><li>0×1=0或0·1=0或0∧1=0</li><li>1×0=0或1·0=0或1∧0=0</li><li>1×1=1或1·1=1或1∧1=1</li></ul><p>可见，两个相“与”的逻辑变量中，只要有一个为0，“与”运算的结果就为0。仅当两个变量都为1时，“与”运算的结果才为1。</p><h2 id="逻辑非" tabindex="-1">逻辑非 <a class="header-anchor" href="#逻辑非" aria-hidden="true">#</a></h2><p><strong>又称为逻辑否定，实际上就是将原逻辑变量的状态求反，其运算规则如下：</strong> 可见，在变量的上方加一横线表示“非”。逻辑变量为0时，“非”运算的结果为1。逻辑变量为1时，“非”运算的结果为0。</p><h2 id="异或" tabindex="-1">异或 <a class="header-anchor" href="#异或" aria-hidden="true">#</a></h2><p><strong>“异或”运算，常用符号“”或“”来表示，其运算规则为：</strong></p><ul><li>00=0 或 00=0</li><li>01=1 或 01=1</li><li>10=1 或 10=1</li><li>11=0 或 11=0</li></ul><p>可见：两个相“异或”的逻辑运算变量取值相同时，“异或”的结果为0。取值相异时，“异或”的结果为1</p><blockquote><p>相同为0，不同为1</p></blockquote>',17),n=[r];function s(d,h,o,c,_,p){return i(),l("div",null,n)}const f=e(t,[["render",s]]);export{g as __pageData,f as default};
