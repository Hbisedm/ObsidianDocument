import{_ as s,c as a,o as n,d as l}from"./app.0b246d93.js";const d=JSON.parse('{"title":"Vite开发服务器的笔记","description":"","frontmatter":{"title":"Vite开发服务器的笔记","tags":["Vite开发服务器"],"创建时间":"星期五, 十月 7日 2022, 8:39:53 晚上","修改时间":"星期日, 十月 9日 2022, 12:15:30 凌晨"},"headers":[{"level":2,"title":"读取文件的原理","slug":"读取文件的原理","link":"#读取文件的原理","children":[]},{"level":2,"title":"读取Css的处理","slug":"读取css的处理","link":"#读取css的处理","children":[{"level":3,"title":"CSS模块化","slug":"css模块化","link":"#css模块化","children":[]},{"level":3,"title":"预处理器","slug":"预处理器","link":"#预处理器","children":[]},{"level":3,"title":"sourceMap","slug":"sourcemap","link":"#sourcemap","children":[]}]},{"level":2,"title":"PostCss","slug":"postcss","link":"#postcss","children":[]}],"relativePath":"工作区/打包工具/Vite/Vite开发服务器.md"}'),p={name:"工作区/打包工具/Vite/Vite开发服务器.md"},o=l(`<p>#vite #dev服务器</p><h1 id="vite开发服务器的笔记" tabindex="-1">Vite开发服务器的笔记 <a class="header-anchor" href="#vite开发服务器的笔记" aria-hidden="true">#</a></h1><h2 id="读取文件的原理" tabindex="-1">读取文件的原理 <a class="header-anchor" href="#读取文件的原理" aria-hidden="true">#</a></h2><p>在使用vite 开发服务器 的时候，会发现可以使用后缀为<code>js</code> <code>vue</code> 等的文件</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202210072048232.png" alt=""></p><p>这是因为vite开发服务器帮我们做了转换。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202210072050659.png" alt=""></p><p>我们写的sfc文件 经过 vite的转换， （sfc -&gt; ast树 -&gt; render -&gt; js ）</p><p>得到js代码，这样浏览器才可以识别并使用。</p><blockquote><p>因为在浏览器和服务器的眼里，你的资源文件都是字符串</p></blockquote><p>只需要将响应头<code>Content-Type</code>设置为<code>text/javascript</code> 管你什么后缀，通通当做js去解析。</p><h2 id="读取css的处理" tabindex="-1">读取Css的处理 <a class="header-anchor" href="#读取css的处理" aria-hidden="true">#</a></h2><ol><li>vite在读取main.js中引用了css的文件</li><li>使用fs模块去读取css文件</li><li>创建style标签，将css文件内容copy进入style标签</li><li>将这个style标签插入到html的head中</li><li>将css文件的内容替换为js脚本，（方便热更新和css模块化） Content-Type 设置为js</li></ol><h3 id="css模块化" tabindex="-1">CSS模块化 <a class="header-anchor" href="#css模块化" aria-hidden="true">#</a></h3><h4 id="为什么需要css模块化" tabindex="-1">为什么需要CSS模块化 <a class="header-anchor" href="#为什么需要css模块化" aria-hidden="true">#</a></h4><p>协同开发过程中，使用同一个class类名，A的开发的<code>footer</code> 与 B开发的<code>footer</code> 同名，导致后面引入的css会覆盖之前的。 出现样式丢失。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxxA.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxxB.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">divA</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">footer</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">divB</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">footer</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>为了解决上述问题</p><p>将A开发的css 改为 <code>xxxA.module.css</code> 将B开发的css 改为 <code>xxxB.module.css</code></p><p>引入时</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> componentACss </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxxA.module.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> componentBCss </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxxB.module.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">divA</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> componentACss</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">footer</span></span>
<span class="line"><span style="color:#A6ACCD;">divB</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> componentBCss</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">footer</span></span>
<span class="line"></span></code></pre></div><h4 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-hidden="true">#</a></h4><blockquote><p>基于Node</p></blockquote><ol><li><code>module.css</code> (module是一种约定，表示需要开启模块化)</li><li>它会将<code>module.css</code>的内容进行一定规则的替换(将<code>footer</code>替换成<code>_footer_1gh66_1</code>)</li><li>同时创建一个映射对象 <code>{footer: &#39;_footer_1gh66_1&#39;}</code></li><li>将替换过后的内容塞进style标签里，然后放入head标签</li><li>将<code>xxx.module.css</code>全部抹除，替换成js脚本语言</li><li>将创建的映射对象默认导出</li></ol><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202210072135493.png" alt=""></p><p><code>vite.config.js</code>修改css模块化的行为</p><p><a href="https://cn.vitejs.dev/config/shared-options.html#css-modules" target="_blank" rel="noreferrer">css-modules</a><strong>配置 CSS modules 的行为</strong>。选项将被传递给 <a href="https://github.com/css-modules/postcss-modules" target="_blank" rel="noreferrer">postcss-modules</a>。</p><ul><li>localsConvention 修改类名的展示形式(驼峰还是中划线)</li><li>generateScopedName 修改生成类名的规则 （postcss module 规则）(因为这里的css最后都会走<a href="https://github.com/webpack/loader-utils#interpolatename" target="_blank" rel="noreferrer">postcss-modules 生成规则</a>)</li><li>scopeBehaviour 全局(global)还是模块化(local) 默认是模块化</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">localsConvention</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">camelCaseOnly</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;">//将xxx-yyy 修改为 xxxYyy</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">generateScopedName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[name]_[local]_[hash:5]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">scopeBehaviour</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">local</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><p>操作：</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202210072146949.png" alt=""></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> lessTest </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./test.module.less</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(lessTest)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202210072145072.png" alt=""></p><h3 id="预处理器" tabindex="-1">预处理器 <a class="header-anchor" href="#预处理器" aria-hidden="true">#</a></h3><blockquote><p>less sass ...</p></blockquote><p>编译 预处理css语言</p><p>例如</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm i less // 安装后项目中就有lessc编译器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">npx lessc --m=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> ./src/test.module.less</span></span>
<span class="line"></span></code></pre></div><div class="language-less"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">main-info</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202210072225886.png" alt=""></p><p>上面是介绍lessc的编译器的使用，sass scss等等也有对应的编译选项(看对应的官方文档)</p><p>变量</p><div class="language-less"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">defaultColor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span></span>
<span class="line"><span style="color:#FFCB6B;">html</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">defaultColor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>可以抽离去网页的主题色</p><p>那么可以使用一个全局文件来放置这些全局样式</p><p>创建一个<code>variables.less</code> 里面放置全局样式</p><p>在需要使用的less文件引入<code>@import url(&quot;./variables.less&quot;);</code></p><p>但其实可以有lessc的编译选项中配置全局变量，这样节省写这些引入语句</p><h4 id="vite中使用预处理器配置选项" tabindex="-1">Vite中使用预处理器配置选项 <a class="header-anchor" href="#vite中使用预处理器配置选项" aria-hidden="true">#</a></h4><p>而在vite webpack中 可以通过配置来引入</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">localsConvention</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">camelCaseOnly</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">generateScopedName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[name]_[local]_[hash:5]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">scopeBehaviour</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">local</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">hashPrefix</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hbisedm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">preprocessorOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// 对预处理器进行配置</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">less</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">//配置lessc的配置选项</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">sass</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// 对应的引入哪有预处理器，就配置哪个</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><p>例如</p><p>定义全局变量文件 <code>variables.less</code></p><div class="language-less"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">defaultColor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>vite使用预处理器选项配置全局变量 <code>vite.config.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">preprocessorOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	      </span><span style="color:#FFCB6B;">less</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">//配置lessc的配置选项</span></span>
<span class="line"><span style="color:#F07178;">	      </span><span style="color:#FFCB6B;">mainColor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">	      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>目标less文件中使用</p><div class="language-less"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@import</span><span style="color:#A6ACCD;"> url(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./variables.less</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">main-info</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">defaultColor</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 来自引入的文件</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">mainColor</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 来自配置选项的配置</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>生成结果</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202210072236187.png" alt=""></p><h5 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h5><p>正常用<a href="https://lesscss.org/usage/#less-options-global-variables" target="_blank" rel="noreferrer">全局配置的写法</a>即可， 那种使用<code>@import</code>频繁的导入没啥必要</p><h3 id="sourcemap" tabindex="-1">sourceMap <a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a></h3><blockquote><p>帮助开发过程中出现错误代码，快读找到出错位置</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">localsConvention</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">camelCaseOnly</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">generateScopedName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[name]_[local]_[hash:5]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">scopeBehaviour</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">local</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">hashPrefix</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hbisedm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">preprocessorOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">less</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">math</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">globalVars</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#FFCB6B;">mainColor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">devSourcemap</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><h2 id="postcss" tabindex="-1">PostCss <a class="header-anchor" href="#postcss" aria-hidden="true">#</a></h2><blockquote><p>vite天生对postcss有良好支持， 先了解PostCss</p></blockquote><p>联想babel，做兼容处理</p><ol><li>对css的新提案做兼容</li><li>浏览器前缀补全</li><li></li></ol>`,69),e=[o];function c(t,r,F,D,y,i){return n(),a("div",null,e)}const A=s(p,[["render",c]]);export{d as __pageData,A as default};
