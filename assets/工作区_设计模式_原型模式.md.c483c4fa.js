import{_ as e,c as t,o as l,a as i}from"./app.d0c2f5ea.js";const b=JSON.parse('{"title":"学废去理解的JavaScript的对象。","description":"","frontmatter":{},"headers":[{"level":2,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"relativePath":"工作区/设计模式/原型模式.md"}'),a={name:"工作区/设计模式/原型模式.md"},o=i('<h1 id="学废去理解的javascript的对象。" tabindex="-1">学废去理解的JavaScript的对象。 <a class="header-anchor" href="#学废去理解的javascript的对象。" aria-hidden="true">#</a></h1><blockquote><p>我觉得首先得去了解下啥是原型模式。这跟其他语言的对象还是有点区别的。</p></blockquote><ul><li>在其他语言里面new个对象。首先得定义它的类型，然后在使用这个类型去new出对象。</li><li>而原型模式的话，可以理解成克隆一个对象出来。</li></ul><blockquote><p>JavaScript遵守这些原型编程的基本准则</p></blockquote><ul><li>所有的数据都是对象。</li><li>要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它。</li><li>对象会记住它的原型。</li><li>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型。</li></ul><blockquote><p>JavaScript的原型继承</p></blockquote><ul><li>所有的数据都是对象</li><li>要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它。 <ul><li>JavaScript的函数既可以作为普通函数调用，也可以作为构造器被调用。当使用new运算符来调用函数时，此时的函数就是一个构造器。用new运算符来创建对象的过程，实际上也只是先克隆Object.prototype对象，再进行一些其他额外操作的过程。</li><li>理解new <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202207092237153.png" alt=""></li></ul></li><li>对象会记住它的原型。</li><li>如果对象无法响应某个请求，它会把这个请求<strong>委托</strong>给它的构造器的原型。 <ul><li>JavaScript中最顶部的原型是<code>Object.prototype</code>这个也为null</li><li>也可以认为每个对象都是<code>Object.prototype</code>克隆出来的</li><li>对象当前找不到对应属性时，这个获取属性的请求会向上委托他的上一级原型</li></ul></li></ul><blockquote><p>注意点：除了根对象Object.prototype本身之外，任何对象都会有一个原型。而通过Object.create( null )可以创建出没有原型的对象。</p></blockquote><h2 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>原型模式是一种设计模式，也是一种编程泛型，它构成了JavaScript这门语言的根本</p>',10),c=[o];function r(p,n,s,_,u,d){return l(),t("div",null,c)}const m=e(a,[["render",r]]);export{b as __pageData,m as default};
