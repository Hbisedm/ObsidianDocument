import{_ as t,c as e,o as a,a as c}from"./app.d0c2f5ea.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"工作区/框架技术/TypeScript/interface与type的区别.md"}'),r={name:"工作区/框架技术/TypeScript/interface与type的区别.md"},d=c("<p>interface 和 type 都可以用来声明 TypeScript 的类型。</p><table><thead><tr><th>对比项</th><th>type</th><th>interface</th></tr></thead><tbody><tr><td>类型的合并方式</td><td>&amp;</td><td>同名自动合并、可通过extends扩展</td></tr><tr><td>支持的数据类型范围</td><td>全部数据类型</td><td>object、function、class</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><blockquote><p>注意：由于 interface 支持同名类型自动合并，我们开发一些组件或工具库时，对于出入参的类型应该尽可能地使用 interface 声明，方便开发者在调用时做自定义扩展</p></blockquote><p>从使用场景上说，type 的用途更加强大，不局限于表达 object/class/function ，还能声明基本类型别名、联合类型、元组等类型。</p>",4),o=[d];function _(n,p,s,i,f,l){return a(),e("div",null,o)}const m=t(r,[["render",_]]);export{y as __pageData,m as default};
