import{_ as s,c as a,o as n,a as l}from"./app.6426b36b.js";const D=JSON.parse('{"title":"var与let区别的笔记","description":"","frontmatter":{"title":"var与let区别的笔记","tags":["var","let"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期四, 七月 28日 2022, 1:33:21 下午"},"headers":[],"relativePath":"工作区/基本知识/JavaScript/var与let区别.md"}'),p={name:"工作区/基本知识/JavaScript/var与let区别.md"},o=l(`<p>#JavaScript #基本知识</p><h1 id="var与let区别的笔记" tabindex="-1">var与let区别的笔记 <a class="header-anchor" href="#var与let区别的笔记" aria-hidden="true">#</a></h1><p>1、作用域不一样。var声明变量，只有函数作用域和全局作用域，没有块级作用域，也就是说可以在代码块<code>{}</code>外部使用。而let可以实现块级作用域，只能在代码块<code>{}</code>内有效，在<code>{}</code>之外不能访问。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;">//报错</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span></span>
<span class="line"></span></code></pre></div><p>2、let没有变量提升。ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区” temporal dead zone，简称 TDZ。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">//报错</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span></span>
<span class="line"></span></code></pre></div><p>3、let变量不能重复声明。之前用var定义变量，在多人开发一个项目时，比如都定义了一个变量a，但各自用途不同，后面定义的a会把前面定义的覆盖掉，而用let就能解决这个问题，不能重复声明以避免混淆。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;">//报错</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span></span>
<span class="line"></span></code></pre></div><p>4、循环作用域。在for循环中，不仅循环体<code>{}</code>会生成块级作用域，循环条件<code>()</code>也会生成块级作用域，循环条件<code>()</code>的块级作用域是循环体<code>{}</code>块级作用域的<strong>父级作用域</strong>，var声明的变量是全局的，包括循环体内与循环体外，let声明的变量作用域只在循环体内，循环体外的变量不受影响。</p>`,9),e=[o];function t(c,r,i,C,d,y){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{D as __pageData,F as default};
