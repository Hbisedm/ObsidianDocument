import{_ as t,c as s,o as e,a}from"./app.0b159a37.js";const C=JSON.parse('{"title":"泛型优于联合类型","description":"","frontmatter":{"tags":null,"title":"泛型优于联合类型","创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期二, 十二月 27日 2022, 10:06:27 上午"},"headers":[],"relativePath":"工作区/框架技术/TypeScript/技巧操作类型.md"}'),o={name:"工作区/框架技术/TypeScript/技巧操作类型.md"},n=a(`<h1 id="泛型优于联合类型" tabindex="-1">泛型优于联合类型 <a class="header-anchor" href="#泛型优于联合类型" aria-hidden="true">#</a></h1><h1 id="巧用-typeof-推导优于自定义类型" tabindex="-1">巧用 Typeof 推导优于自定义类型 <a class="header-anchor" href="#巧用-typeof-推导优于自定义类型" aria-hidden="true">#</a></h1><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 声明模块的初始state</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> userInitState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">workid</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">avator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">department</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 根据初始state推导出当前模块的数据结构</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IUserStateMode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> userInitState</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 导出的数据类型可以在其他地方使用</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>内置函数</th><th>用途</th><th>例子</th></tr></thead><tbody><tr><td><code>Partial&lt;T&gt;</code></td><td>类型 T 的所有子集（每个属性都可选）</td><td><code>Partial&lt;IUserStateMode&gt;</code></td></tr><tr><td><code>Readony&lt;T&gt;</code></td><td>返回和 T 一样的类型，但所有属性都是只读</td><td><code>Readony&lt;IUserStateMode&gt;</code></td></tr><tr><td><code>Required&lt;T&gt;</code></td><td>返回和 T 一样的类型，每个属性都是必须的</td><td><code>Required&lt;IUserStateMode&gt;</code></td></tr><tr><td><code>Pick&lt;T, K extends keyof T&gt;</code></td><td>从类型 T 中挑选的部分属性 K</td><td><code>Pick&lt;IUserStateMode, &#39;name&#39; &#39;workid&#39; &#39;avator&#39;&gt;</code></td></tr><tr><td><code>Exclude&lt;T, U extends keyof T&gt;</code></td><td>从类型 T 中移除部分属性 U</td><td><code>Exclude&lt;IUserStateMode, &#39;name&#39; &#39;department&#39;&gt;</code></td></tr><tr><td><code>NonNullable&lt;T&gt;</code></td><td>从属性 T 中移除 null 和 undefined</td><td><code>NonNullable&lt;IUserStateMode&gt;</code></td></tr><tr><td><code>ReturnType&lt;T&gt;</code></td><td>返回函数类型 T 的返回值类型</td><td><code>ReturnType&lt;IUserStateMode&gt;</code></td></tr><tr><td><code>Record&lt;K, T&gt;</code></td><td>生产一个属性为 K,类型为 T 的类型集合</td><td><code>Record&lt;keyof IUserStateMode, string&gt; </code></td></tr><tr><td><code>Omit&lt;T, K&gt;</code></td><td>忽略 T 中的 K 属性</td><td><code>Omit&lt;IUserStateMode, &#39;name&#39;&gt;</code></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>`,4),l=[n];function d(p,c,r,y,D,i){return e(),s("div",null,l)}const A=t(o,[["render",d]]);export{C as __pageData,A as default};
