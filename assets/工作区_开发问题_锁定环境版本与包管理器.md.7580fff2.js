import{_ as s,c as n,o as a,d as l}from"./app.0b246d93.js";const h=JSON.parse('{"title":"锁定环境版本与包管理器的笔记","description":"","frontmatter":{"title":"锁定环境版本与包管理器的笔记","tags":["锁定环境版本与包管理器"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期四, 七月 28日 2022, 1:20:41 下午"},"headers":[{"level":2,"title":"开发环境","slug":"开发环境","link":"#开发环境","children":[]},{"level":2,"title":"痛点问题","slug":"痛点问题","link":"#痛点问题","children":[]},{"level":2,"title":"锁定项目 Node 版本","slug":"锁定项目-node-版本","link":"#锁定项目-node-版本","children":[]},{"level":2,"title":"锁定包管理器","slug":"锁定包管理器","link":"#锁定包管理器","children":[]}],"relativePath":"工作区/开发问题/锁定环境版本与包管理器.md"}'),p={name:"工作区/开发问题/锁定环境版本与包管理器.md"},e=l(`<p>#npm #工具操作</p><h1 id="锁定环境版本与包管理器的笔记" tabindex="-1">锁定环境版本与包管理器的笔记 <a class="header-anchor" href="#锁定环境版本与包管理器的笔记" aria-hidden="true">#</a></h1><blockquote><p>通过文档和沟通约束，远不如用工具（代码）约束。 作者：亖混子 原文：<a href="https://segmentfault.com/a/1190000041918155" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000041918155</a></p></blockquote><h2 id="开发环境" tabindex="-1">开发环境 <a class="header-anchor" href="#开发环境" aria-hidden="true">#</a></h2><ol><li><p>Node.js</p></li><li><p>Package Manager （npm、yarn、pnpm）</p></li></ol><h2 id="痛点问题" tabindex="-1">痛点问题 <a class="header-anchor" href="#痛点问题" aria-hidden="true">#</a></h2><p>成员机器 Node.js 版本不统一：守旧派用 12.x、保守用 14.x、激进用 17.x。项目能否正常跑起来全凭天意，在没有 CICD 流水线加持本地 npm run build 的场景下线上风险可想而知。</p><p>有人习惯用 npm、有人习惯用 yarn, 代码库里面经常会存在 package-lock.json、yarn.lock 文件同时存在的情况。更痛的点还是各种奇奇怪怪问题排查起来没有头绪。</p><p>我们要做的就是将问题掐死在源头：锁定 Node.js 版本和包管理器</p><h2 id="锁定项目-node-版本" tabindex="-1">锁定项目 Node 版本 <a class="header-anchor" href="#锁定项目-node-版本" aria-hidden="true">#</a></h2><p>通过在 package.json 中指定 engines 字段，可限定项目使用的 node 版本。下面配置仅允许用户使用 14 或者 16的版本。更多的配置可以参考  package.json | npm Docs 、semver</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// package.json   </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">engines</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">14.x || 16.x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span></code></pre></div><p>配置之后你会发现，该字段只对 yarn 生效。那如何对 npm 也生效呢？在项目根目录下的 <code>.npmrc</code> 文件中增加如下配置</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// .npmrc  </span></span>
<span class="line"><span style="color:#A6ACCD;">engine-strict = true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>以上配置完成后，npm install 试试吧，错误的 Node.js 将直接退出</p><h2 id="锁定包管理器" tabindex="-1">锁定包管理器 <a class="header-anchor" href="#锁定包管理器" aria-hidden="true">#</a></h2><p>利用 only-allow 工具包、npm scripts 快速实现锁定。</p><p>步骤一：在项目中 <code>npm install -D only-allow</code></p><p>步骤二：在 package.json 文件中进行配置 <code>scripts.preinstall</code> ， 允许输入的值 only-allow npm、only-allow pnpm、only-allow yarn</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// package.json  </span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">preinstall</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">only-allow npm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    ...  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以上配置完成后，可以再乱用 （yarn、npm、pnpm） 试试</p>`,21),o=[e];function t(c,r,i,d,D,y){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
