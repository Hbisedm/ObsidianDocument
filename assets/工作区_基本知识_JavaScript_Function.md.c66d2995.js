import{_ as e,c as t,o as a,a as i}from"./app.6426b36b.js";const f=JSON.parse('{"title":"Function的笔记","description":"","frontmatter":{"title":"Function的笔记","tags":["Function","JavaScript"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期日, 八月 7日 2022, 3:11:25 下午"},"headers":[{"level":2,"title":"如何创建执行环境 (执行函数时做了哪些事)","slug":"如何创建执行环境-执行函数时做了哪些事","link":"#如何创建执行环境-执行函数时做了哪些事","children":[{"level":3,"title":"ES3 规范","slug":"es3-规范","link":"#es3-规范","children":[]},{"level":3,"title":"ES5 规范","slug":"es5-规范","link":"#es5-规范","children":[]}]}],"relativePath":"工作区/基本知识/JavaScript/Function.md"}'),n={name:"工作区/基本知识/JavaScript/Function.md"},l=i('<p>#Function</p><h1 id="function的笔记" tabindex="-1">Function的笔记 <a class="header-anchor" href="#function的笔记" aria-hidden="true">#</a></h1><h2 id="如何创建执行环境-执行函数时做了哪些事" tabindex="-1">如何创建执行环境 (执行函数时做了哪些事) <a class="header-anchor" href="#如何创建执行环境-执行函数时做了哪些事" aria-hidden="true">#</a></h2><p>我们现在知道每次调用函数时，javascript 引擎都会创建一个新的执行环境，而如何创建这一系列的执行环境呢， 答案是执行器会分为两个阶段来完成， 分别是</p><ul><li>创建阶段</li><li>激活(执行)阶段</li></ul><p><strong>而即使步骤相同但是由于规范的不同，每个阶段执行的过程有很大的不同。</strong></p><h3 id="es3-规范" tabindex="-1">ES3 规范 <a class="header-anchor" href="#es3-规范" aria-hidden="true">#</a></h3><p>创建阶段：</p><ul><li>1.创建作用域链。</li><li>2.创建变量对象VO(包括参数，函数，变量)。</li><li>3.确定this的值。</li></ul><p>激活/执行阶段： - 完成变量分配，执行代码。 [[VO与AO]]</p><h3 id="es5-规范" tabindex="-1">ES5 规范 <a class="header-anchor" href="#es5-规范" aria-hidden="true">#</a></h3><p>创建阶段：</p><ul><li>1.确定 this 的值。</li><li>2.创建词法环境(LexicalEnvironment)。</li><li>3.创建变量环境(VariableEnvironment)。</li></ul><blockquote><p>变量环境也是一个词法环境。他具有词法环境中所有的属性 在ES6中，LexicalEnvironment和VariableEnvironment 的区别在于前者用于存储函数声明和变量let 和 const 绑定，而后者仅用于存储变量 var 绑定。</p></blockquote><p>激活/执行阶段： - 完成变量分配，执行代码。 [[词法环境]]</p><p>[[执行上下文与作用域]] [[作用域]] <a href="https://segmentfault.com/a/1190000008558325" target="_blank" rel="noreferrer">JavaScript || 函数</a></p>',16),r=[l];function c(o,s,h,d,p,u){return a(),t("div",null,r)}const v=e(n,[["render",c]]);export{f as __pageData,v as default};
