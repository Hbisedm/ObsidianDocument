import{_ as l,c as a,o,a as n,b as s}from"./app.741d02cd.js";const q=JSON.parse('{"title":"AST","description":"","frontmatter":{"title":"AST","tags":["工程化"],"excerpt":"AST的概念与使用","创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期六, 十一月 19日 2022, 7:32:50 晚上"},"headers":[{"level":2,"title":"什么是AST","slug":"什么是ast","link":"#什么是ast","children":[]},{"level":2,"title":"生成的AST","slug":"生成的ast","link":"#生成的ast","children":[{"level":3,"title":"词法分析 (Lexical Analysis)","slug":"词法分析-lexical-analysis","link":"#词法分析-lexical-analysis","children":[]},{"level":3,"title":"语法分析 (Syntactic Analysis)","slug":"语法分析-syntactic-analysis","link":"#语法分析-syntactic-analysis","children":[]},{"level":3,"title":"常用的 AST 节点类型对照表","slug":"常用的-ast-节点类型对照表","link":"#常用的-ast-节点类型对照表","children":[]}]},{"level":2,"title":"AST的应用","slug":"ast的应用","link":"#ast的应用","children":[]},{"level":2,"title":"生成字节码","slug":"生成字节码","link":"#生成字节码","children":[]},{"level":2,"title":"执行代码","slug":"执行代码","link":"#执行代码","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"工作区/工程化/AST应用.md"}'),p={name:"工作区/工程化/AST应用.md"},t=n(`<p>#工程化 #AST</p><h1 id="ast" tabindex="-1">AST <a class="header-anchor" href="#ast" aria-hidden="true">#</a></h1><h2 id="什么是ast" tabindex="-1">什么是AST <a class="header-anchor" href="#什么是ast" aria-hidden="true">#</a></h2><blockquote><p><code>AST</code> 是 <code>Abstract Syntax Tree</code> 的简称，是前端工程化绕不过的一个名词。它涉及到工程化诸多环节的应用，比如:</p></blockquote><ol><li>如何将 Typescript 转化为 Javascript (typescript)</li><li>如何将 SASS/LESS 转化为 CSS (sass/less)</li><li>如何将 ES6+ 转化为 ES5 (babel)</li><li>如何将 Javascript 代码进行格式化 (eslint/prettier)</li><li>如何识别 React 项目中的 JSX (babel)</li><li>GraphQL、MDX、Vue SFC 等等</li></ol><p>而在语言转换的过程中，实质上就是对其 AST 的操作，核心步骤就是 AST 三步走</p><ol><li>Code -&gt; AST (Parse)</li><li>AST -&gt; AST (Transform)</li><li>AST -&gt; Code (Generate)</li></ol><blockquote><p>TS转换JS的过程：TS的Code 转成 TS的AST；TS的AST转成JS的AST；JS的AST转成JS的Code</p></blockquote><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292105187.webp" alt="img"></p><p>以下是一段代码，及其对应的 AST（抽象的语法树）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Code</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 对应的AST</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Program</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">body</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">VariableDeclaration</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">declarations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">VariableDeclarator</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Identifier</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">init</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Literal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">raw</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">const</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sourceType</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>不同的语言拥有不同的解析器，比如 Javascript 的解析器和 CSS 的解析器就完全不同。（一般JS的解析器是babel，CSS的解析器是postCss）</p><p>对相同的语言，也存在诸多的解析器，也就会生成多种 AST，如 <code>babel</code> 与 <code>espree</code>。</p><p>在 <a href="https://astexplorer.net/" target="_blank" rel="noreferrer">AST Explorer (opens new window)</a>中，列举了诸多语言的解析器(Parser)，及转化器(Transformer)。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292116023.png" alt="image-20220529211605976"></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292116906.png" alt="image-20220529211636863"></p><p>使用不同的解析器，就会解析出不同的AST</p><h2 id="生成的ast" tabindex="-1">生成的AST <a class="header-anchor" href="#生成的ast" aria-hidden="true">#</a></h2><blockquote><p>生成AST的过程分为两步——词法分析、语法分析。</p></blockquote><h3 id="词法分析-lexical-analysis" tabindex="-1">词法分析 (Lexical Analysis) <a class="header-anchor" href="#词法分析-lexical-analysis" aria-hidden="true">#</a></h3><p>词法分析用以将代码转化为 <code>Token</code> 流，维护一个关于 Token 的数组</p><p>可以把 tokens 看作是一个扁平的语法片段数组，描述了代码片段在整个代码中的位置和记录当前值的一些信息</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205292122553.webp" alt="img"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Code</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Token</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">loc</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">loc</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">loc</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>词法分析后的 Token 流也有诸多应用，如:</p><ol><li>代码检查，如 eslint 判断是否以分号结尾，判断是否含有分号的 token</li><li>语法高亮，如 highlight/prism 使之代码高亮</li><li>模板语法，如 ejs 等模板也离不开</li></ol><h3 id="语法分析-syntactic-analysis" tabindex="-1">语法分析 (Syntactic Analysis) <a class="header-anchor" href="#语法分析-syntactic-analysis" aria-hidden="true">#</a></h3><p>语法分析阶段会把 token (令牌) 转换成 AST 的形式，这个阶段会使用token中的信息把它们转换成一个 AST 的表述结构，使用type属性记录当前的类型</p><p>语法分析将 Token 流转化为结构化的 AST，方便操作</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Program</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">body</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ExpressionStatement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">expression</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AssignmentExpression</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">operator</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Identifier</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Literal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">raw</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sourceType</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="常用的-ast-节点类型对照表" tabindex="-1">常用的 AST 节点类型对照表 <a class="header-anchor" href="#常用的-ast-节点类型对照表" aria-hidden="true">#</a></h3>`,31),e=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"类型原名称"),s("th",null,"中文名称"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"Program"),s("td",null,"程序主体"),s("td",null,"整段代码的主体")]),s("tr",null,[s("td",null,"VariableDeclaration"),s("td",null,"变量声明"),s("td",null,"声明一个变量，例如 var let const")]),s("tr",null,[s("td",null,"FunctionDeclaration"),s("td",null,"函数声明"),s("td",null,"声明一个函数，例如 function")]),s("tr",null,[s("td",null,"ExpressionStatement"),s("td",null,"表达式语句"),s("td",null,"通常是调用一个函数，例如 console.log()")]),s("tr",{var:"",a:""},[s("td",null,"BlockStatement"),s("td",null,"块语句"),s("td",null,"包裹在 {} 块内的代码，例如 if (condition)")]),s("tr",null,[s("td",null,"BreakStatement"),s("td",null,"中断语句"),s("td",null,"通常指 break")]),s("tr",null,[s("td",null,"ContinueStatement"),s("td",null,"持续语句"),s("td",null,"通常指 continue")]),s("tr",null,[s("td",null,"ReturnStatement"),s("td",null,"返回语句"),s("td",null,"通常指 return")]),s("tr",null,[s("td",null,"SwitchStatement"),s("td",null,"Switch 语句"),s("td",null,"通常指 Switch Case 语句中的 Switch")]),s("tr",null,[s("td",null,"IfStatement"),s("td",null,"If 控制流语句"),s("td",null,"控制流语句，通常指 if(condition){}else{}")]),s("tr",null,[s("td",null,"Identifier"),s("td",null,"标识符"),s("td",null,"标识，例如声明变量时 var identi = 5 中的 identi")]),s("tr",null,[s("td",null,"CallExpression"),s("td",null,"调用表达式"),s("td",null,"通常指调用一个函数，例如 console.log()")]),s("tr",null,[s("td",null,"BinaryExpression"),s("td",null,"二进制表达式"),s("td",null,"通常指运算，例如 1+2")]),s("tr",null,[s("td",null,"MemberExpressionh"),s("td",null,"成员表达式"),s("td",null,"通常指调用对象的成员，例如 console 对象的 log 成员")]),s("tr",null,[s("td",null,"ArrayExpression"),s("td",null,"数组表达式"),s("td",null,"通常指一个数组，例如 [1, 3, 5]")]),s("tr",null,[s("td",null,"FunctionExpression"),s("td",null,"函数表达式"),s("td",null,"例如const func = function () {}")]),s("tr",null,[s("td",null,"ArrowFunctionExpression"),s("td",null,"箭头函数表达式"),s("td",null,"例如const func = ()=> {}")]),s("tr",null,[s("td",null,"AwaitExpression"),s("td",null,"await表达式"),s("td",null,"例如let val = await f()")]),s("tr",null,[s("td",null,"ObjectMethod"),s("td",null,"对象中定义的方法"),s("td",null,"例如 let obj = { fn ()")]),s("tr",null,[s("td",null,"NewExpression"),s("td",null,"New 表达式"),s("td",null,"通常指使用 New 关键词")]),s("tr",null,[s("td",null,"AssignmentExpression"),s("td",null,"赋值表达式"),s("td",null,"通常指将函数的返回值赋值给变量")]),s("tr",null,[s("td",null,"UpdateExpression"),s("td",null,"更新表达式"),s("td",null,"通常指更新成员值，例如 i++")]),s("tr",null,[s("td",null,"Literal"),s("td",null,"字面量"),s("td",null,"字面量")]),s("tr",null,[s("td",null,"BooleanLiteral"),s("td",null,"布尔型字面量"),s("td",null,"布尔值，例如 true false")]),s("tr",null,[s("td",null,"NumericLiteral"),s("td",null,"数字型字面量"),s("td",null,"数字，例如 100")]),s("tr",null,[s("td",null,"StringLiteral"),s("td",null,"字符型字面量"),s("td",null,"字符串，例如 vansenb")]),s("tr",null,[s("td",null,"SwitchCase"),s("td",null,"Case 语句"),s("td",null,"通常指 Switch 语句中的 Case")])])],-1),r=n('<h2 id="ast的应用" tabindex="-1">AST的应用 <a class="header-anchor" href="#ast的应用" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/6844903958574530568" target="_blank" rel="noreferrer">html的AST解析器</a></p><p>可参考一个最简编译器的实现 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noreferrer">the super tiny compiler</a></p><blockquote><p>下面介绍下 JS AST -&gt; 字节码 -&gt; 解释编译执行代码的过程</p></blockquote><h2 id="生成字节码" tabindex="-1">生成字节码 <a class="header-anchor" href="#生成字节码" aria-hidden="true">#</a></h2><p>js代码生成为AST，若要执行需要通过V8 的解释器(也叫Ignition)转为字节码再转为机器码</p><blockquote><p>为啥不直接转机器码？</p></blockquote><ol><li>早期V8是这么做的，但后来因为机器码的体积太大了，引发了严重内存占用问题。</li><li>字节码可以在不同的平台上经过解释器跑达到相同的结果。</li></ol><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202207141501320.png" alt=""></p><blockquote><p>很容易得出，字节码是比机器码轻量得多的代码。那 V8 为什么要使用字节码，字节码到底是个什么东西？</p></blockquote><p>字节码是介于AST与机器码直接的一种代码。但是与特定类型的机器码无关。字节码需要通过解释器将其转为机器码然后运行。 字节码仍然需要转换为机器码，但和原来不同的是，现在不用一次性将全部的字节码都转换成机器码，而是通过解释器来<strong>逐行</strong>执行字节码，<strong>省去了生成二进制文件</strong>的操作，这样就大大<strong>降低了内存</strong>的压力。</p><h2 id="执行代码" tabindex="-1">执行代码 <a class="header-anchor" href="#执行代码" aria-hidden="true">#</a></h2><blockquote><p>编译器和解释器的 根本区别在于前者会编译生成二进制文件但后者不会。</p></blockquote><p>上文说道字节码是逐行执行，但是如果发现某一部分代码重复出现，那么V8将它记作<strong>热点代码</strong>(HotSpot)，然后代码<strong>编译</strong>成机器码保存起来。</p><p>这个用来编译的工具就是V8的<code>编译器</code>(也叫做<code>TurboFan</code>) , 因此在这样的机制下，代码执行的时间越久，那么执行效率会越来越高，因为有越来越多的字节码被标记为<code>热点代码</code>，遇到它们时直接执行相应的机器码，不用再次将转换为机器码。</p><p>其实当你听到有人说 JS 就是一门解释器语言的时候，其实这个说法是有问题的。因为字节码不仅配合了解释器，而且还和编译器打交道，所以 JS 并不是完全的解释型语言。</p><p>并且，这种字节码跟编译器和解释器结合的技术，我们称之为<code>即时编译</code>, 也就是我们经常听到的<code>JIT</code>。（这里和Java的JIT与Android的NDK编程应该是同个东西吧）</p><p>V8中执行一段JS代码的过程：</p><ol><li>首先通过词法分析和语法分析生成 <code>AST</code></li><li>将 AST 转换为字节码</li><li>由解释器逐行执行字节码，遇到热点代码启动编译器进行编译，生成对应的机器码, 以优化执行效率</li></ol><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-hidden="true">#</a></h2><p><a href="https://q.shanyue.tech/engineering/756.html#ast-%E7%9A%84%E7%94%9F%E6%88%90" target="_blank" rel="noreferrer">AST是啥和它的应用</a><a href="https://sanyuan0704.top/blogs/javascript/js-v8/003.html" target="_blank" rel="noreferrer">V8如何执行一段JS代码</a></p>',21),c=[t,e,r];function F(D,y,i,u,d,C){return o(),a("div",null,c)}const h=l(p,[["render",F]]);export{q as __pageData,h as default};
