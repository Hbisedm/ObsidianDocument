import{_ as s,c as a,o as n,a as e}from"./app.d0c2f5ea.js";const A=JSON.parse('{"title":"reduce、promise配合使用","description":"","frontmatter":{"title":"reduce、promise配合使用","date":"2022-05-26T12:42:26.000Z","tags":["常用开发技巧"],"excerpt":"串行处理promise实例"},"headers":[{"level":3,"title":"更简单的方法","slug":"更简单的方法","link":"#更简单的方法","children":[]},{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"工作区/技巧操作/reduce与promise.md"}'),l={name:"工作区/技巧操作/reduce与promise.md"},o=e(`<h1 id="reduce与promise的配合使用" tabindex="-1">reduce与promise的配合使用 <a class="header-anchor" href="#reduce与promise的配合使用" aria-hidden="true">#</a></h1><p>利用 reduce 实现 Promise 串行执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// array是个Promise数组</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">prev</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">prev</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-hidden="true">#</a></h4><ul><li>Array.prototype.reduce是个同步方法（在一个事件循环就会完成）</li><li>但这仅仅是在内存快速构造了 Promise 执行队列</li><li><code>Reduce</code> 的作用就是在内存中生成这个队列，而不需要把这个冗余的队列写在代码里！</li></ul><h3 id="更简单的方法" tabindex="-1">更简单的方法 <a class="header-anchor" href="#更简单的方法" aria-hidden="true">#</a></h3><p>使用async/await</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runPromiseByQueue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">myPromises</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myPromises</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">value</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>不过要注意，这个思路与 <code>reduce</code> 思路不同之处在于，利用 <code>reduce</code> 的函数整体是个同步函数，自己先执行完毕构造 Promise 队列，然后在内存异步执行；而利用 async/await 的函数是利用将自己改造为一个异步函数，等待每一个 Promise 执行完毕。</p></blockquote><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-hidden="true">#</a></h3><ul><li><a href="https://segmentfault.com/a/1190000016832285" target="_blank" rel="noreferrer">用Reduce实现Promise串行</a></li><li><a href="https://juejin.cn/post/6844903582450319373" target="_blank" rel="noreferrer">使用Array.reduce创建Promise回调链</a></li><li><a href="https://juejin.cn/post/7091486488201805861#heading-0" target="_blank" rel="noreferrer">什么是好的面试题</a></li></ul>`,11),p=[o];function r(c,t,i,y,F,d){return n(),a("div",null,p)}const u=s(l,[["render",r]]);export{A as __pageData,u as default};
