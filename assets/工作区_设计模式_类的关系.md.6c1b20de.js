import{_ as e,c as a,o as l,a as i}from"./app.0b159a37.js";const b=JSON.parse('{"title":"类的关系的笔记","description":"","frontmatter":{"title":"类的关系的笔记","tags":["类的关系"],"创建时间":"星期四, 八月 4日 2022, 11:51:47 中午","修改时间":"星期三, 十一月 9日 2022, 1:40:00 下午"},"headers":[{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"组合","slug":"组合","link":"#组合","children":[]},{"level":2,"title":"聚合","slug":"聚合","link":"#聚合","children":[]},{"level":2,"title":"关联","slug":"关联","link":"#关联","children":[{"level":3,"title":"一对一关联","slug":"一对一关联","link":"#一对一关联","children":[]},{"level":3,"title":"一对多关联","slug":"一对多关联","link":"#一对多关联","children":[]},{"level":3,"title":"多对多关联","slug":"多对多关联","link":"#多对多关联","children":[]}]},{"level":2,"title":"依赖","slug":"依赖","link":"#依赖","children":[]},{"level":2,"title":"原则","slug":"原则","link":"#原则","children":[]}],"relativePath":"工作区/设计模式/类的关系.md"}'),n={name:"工作区/设计模式/类的关系.md"},s=i(`<p>#类的关系 #面向对象</p><h1 id="类的关系的笔记" tabindex="-1">类的关系的笔记 <a class="header-anchor" href="#类的关系的笔记" aria-hidden="true">#</a></h1><blockquote><p>面向对象编程中的类的关系 Java是面向对象的编程语言 ，最小的单位就类 ，这些类抽象出来 是单独独立的吗 ？ 类和类之间 有没有关系呢 ？ 在Java中 类和类之间 ，我们给予分了 以下六种关系 ：</p></blockquote><ul><li>继承</li><li>实现</li><li>聚合 (聚在一起，可以分割) 聚在一起</li><li>组合 (组在一起，不可以分割)</li><li>关联 ⭐⭐</li><li>依赖 ⭐</li></ul><h2 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-hidden="true">#</a></h2><ol><li>A is-a B 继承 实现</li><li>A has-a B 组合 聚合 关联</li><li>A use-a B 依赖</li></ol><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-hidden="true">#</a></h2><p><code>extends</code></p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-hidden="true">#</a></h2><p><code>implemetns</code> <code>interface</code></p><h2 id="组合" tabindex="-1">组合 <a class="header-anchor" href="#组合" aria-hidden="true">#</a></h2><p>相比于聚合，组合是一种耦合度更强的关联关系</p><blockquote><p>也是整体和部分的关系，不可分割，要出现都出现，要消亡都消亡。比如人和内脏的关系</p></blockquote><h2 id="聚合" tabindex="-1">聚合 <a class="header-anchor" href="#聚合" aria-hidden="true">#</a></h2><p>关联关系的一种</p><blockquote><p>整体和部分的关系，创建的时候可能是分开的。比如汽车和车轮、电脑和主板。</p></blockquote><h2 id="关联" tabindex="-1">关联 <a class="header-anchor" href="#关联" aria-hidden="true">#</a></h2><blockquote><p>也是整体和部分的关系，可以分割。通过某件事联系在一起。例如：人有电脑</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">Class</span><span style="color:#A6ACCD;"> Teach </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="一对一关联" tabindex="-1">一对一关联 <a class="header-anchor" href="#一对一关联" aria-hidden="true">#</a></h3><h3 id="一对多关联" tabindex="-1">一对多关联 <a class="header-anchor" href="#一对多关联" aria-hidden="true">#</a></h3><h3 id="多对多关联" tabindex="-1">多对多关联 <a class="header-anchor" href="#多对多关联" aria-hidden="true">#</a></h3><h2 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-hidden="true">#</a></h2><blockquote><p>为了完成某个功能，需要依赖于其他类才能实现。 不是整体和部分的关系，某一件事情产生了关系，<strong>临时</strong>组合在一起。这件事一做完关系就解散。（即只有在需要的时候才创建对象）</p></blockquote><h2 id="原则" tabindex="-1">原则 <a class="header-anchor" href="#原则" aria-hidden="true">#</a></h2><blockquote><p>设计类的关系的原则：高内聚低耦合 耦合度：紧密   继承（实现）&gt;组合&gt;聚合&gt;关联&gt;依赖</p></blockquote>`,26),t=[s];function r(d,c,o,h,p,u){return l(),a("div",null,t)}const k=e(n,[["render",r]]);export{b as __pageData,k as default};
