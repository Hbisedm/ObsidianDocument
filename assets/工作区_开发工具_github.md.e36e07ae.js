import{_ as e,c as t,o as i,a}from"./app.d0c2f5ea.js";const _=JSON.parse('{"title":"github","description":"","frontmatter":{"title":"github","创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期五, 十一月 18日 2022, 11:01:06 上午"},"headers":[],"relativePath":"工作区/开发工具/github.md"}'),s={name:"工作区/开发工具/github.md"},r=a(`<h1 id="创建github项目和关联本地" tabindex="-1">创建github项目和关联本地 <a class="header-anchor" href="#创建github项目和关联本地" aria-hidden="true">#</a></h1><p>本地文件夹下运行<code>git init</code>初始化git一些信息</p><ul><li><code>git add .</code></li><li><code>git commit -m &quot;init&quot;</code></li><li><code>git remote add origin git@github.com:xxxx/XXXXXX.git</code> 关联远程，这时候需要在github创建一样名字的仓库</li><li><code>git push -u origin main</code> 现在github默认是main分支</li></ul><h1 id="pr-pull-request" tabindex="-1">PR(pull request) <a class="header-anchor" href="#pr-pull-request" aria-hidden="true">#</a></h1><p><a href="https://www.zhihu.com/question/21682976" target="_blank" rel="noreferrer">参考链接</a></p><p>我尝试用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。</p><p>当你想更正别人仓库里的错误时，要走一个流程：</p><ol><li>先 fork 别人的仓库，相当于拷贝一份，相信我，不会有人直接让你改修原仓库的</li><li>clone 到本地分支，做一些 bug fix</li><li>发起 pull request 给原仓库，让他看到你修改的 bug</li><li>原仓库 review 这个 bug，如果是正确的话，就会 merge 到他自己的项目中</li></ol><p>至此，整个 pull request 的过程就结束了。</p><p>理解了 pull request 的含义和流程，具体操作也就简单了。</p><h1 id="统计功能" tabindex="-1">统计功能 <a class="header-anchor" href="#统计功能" aria-hidden="true">#</a></h1><p><a href="https://visitor-badge.glitch.me/" target="_blank" rel="noreferrer">一个访客统计的徽章（ badge ）服务</a></p><p>原理很简单，徽章是一个 svg，你只需要在你的 issues 或者 readme 中添加一个 markdown 的图片：</p><div class="language-markdown"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">!</span><span style="color:#89DDFF;">[](</span><span style="color:#F07178;"> </span><span style="color:#F07178;font-weight:bold;">https://visitor-badge.glitch.me/badge?page_id=&lt;your_page_id&gt;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>当有人打开你的 issue 或者 github 仓库时，浏览器会加载这个图片，服务器就会发出一个请求。</p><p>之后根据请求里的 page_id 来计数，并将最新的数量生成到一个 svg 图片中，将这个 svg 返回，浏览器就可以显示出来了。</p><p>注意这里的参数：page_id, 需要自己手动给一个唯一的字符串，没有特定规则，只要能唯一标识当前页面即可。</p>`,17),l=[r];function o(p,n,d,c,u,g){return i(),t("div",null,l)}const b=e(s,[["render",o]]);export{_ as __pageData,b as default};
