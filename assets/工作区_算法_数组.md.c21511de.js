import{_ as e,c as t,o as a,d as s}from"./app.0b246d93.js";const u=JSON.parse('{"title":"数组","description":"","frontmatter":{"title":"数组","date":"2022-07-07T21:18:34.000Z","tags":["数组"]},"headers":[{"level":2,"title":"理论基础","slug":"理论基础","link":"#理论基础","children":[]},{"level":2,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[{"level":3,"title":"我的理解","slug":"我的理解","link":"#我的理解","children":[]}]}],"relativePath":"工作区/算法/数组.md"}'),n={name:"工作区/算法/数组.md"},o=s(`<p>#数组 #算法</p><h1 id="数组的笔记" tabindex="-1">数组的笔记 <a class="header-anchor" href="#数组的笔记" aria-hidden="true">#</a></h1><h2 id="理论基础" tabindex="-1">理论基础 <a class="header-anchor" href="#理论基础" aria-hidden="true">#</a></h2><p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong> 数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p><ul><li><strong>数组下标都是从0开始的。</strong></li><li><strong>数组内存空间的地址是连续的</strong></li></ul><p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></p><h2 id="二分查找" tabindex="-1">二分查找 <a class="header-anchor" href="#二分查找" aria-hidden="true">#</a></h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">输入: nums = [-1,0,3,5,9,12], target = 9     </span></span>
<span class="line"><span style="color:#A6ACCD;">输出: 4       </span></span>
<span class="line"><span style="color:#A6ACCD;">解释: 9 出现在 nums 中并且下标为 4     </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>这道题目的前提是数组为有序数组</strong>，同时题目还强调<strong>数组中无重复元素</strong>，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件，当大家看到题目描述满足如上条件的时候，可要想一想是不是可以用二分法了。</p><p>二分查找涉及的很多的边界条件，逻辑比较简单，但就是写不好。例如到底是 <code>while(left &lt; right)</code> 还是 <code>while(left &lt;= right)</code>，到底是<code>right = middle</code>呢，还是要<code>right = middle - 1</code>呢？</p><p>大家写二分法经常写乱，主要是因为<strong>对区间的定义没有想清楚，区间的定义就是不变量</strong>。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p><p>写二分法，区间的定义一般为两种，左闭右闭即[left, right]，或者左闭右开即[left, right)。</p><p>写二分法，区间的定义一般为两种，</p><ul><li>左闭右闭即[left, right]</li><li>左闭右开即[left, right)</li></ul><h3 id="我的理解" tabindex="-1">我的理解 <a class="header-anchor" href="#我的理解" aria-hidden="true">#</a></h3><p>想象下，极端情况也就是<code>[a, b]</code> or <code>[a]</code> 那么这个情况的上个是 <code>[a, b, c]</code> or<code>[a, b]</code><code>[a, b, c]</code> =&gt; <code>[a, b]</code> =&gt; left +1 / right -1 <code>[a, b]</code> =&gt; <code>[a]</code> =&gt; left+ 1/ right</p>`,17),l=[o];function r(c,d,i,p,h,g){return a(),t("div",null,l)}const f=e(n,[["render",r]]);export{u as __pageData,f as default};
