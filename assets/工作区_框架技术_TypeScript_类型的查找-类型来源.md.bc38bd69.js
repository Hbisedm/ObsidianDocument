import{_ as e,c as t,o as i,a as c}from"./app.6426b36b.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"内置类型声明","slug":"内置类型声明","link":"#内置类型声明","children":[]},{"level":2,"title":"外部类型声明（第三方）","slug":"外部类型声明-第三方","link":"#外部类型声明-第三方","children":[]},{"level":2,"title":"自定义类型声明","slug":"自定义类型声明","link":"#自定义类型声明","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"工作区/框架技术/TypeScript/类型的查找-类型来源.md"}'),a={name:"工作区/框架技术/TypeScript/类型的查找-类型来源.md"},s=c('<p>类型的查找 <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206191532127.png" alt=""></p><h2 id="内置类型声明" tabindex="-1">内置类型声明 <a class="header-anchor" href="#内置类型声明" aria-hidden="true">#</a></h2><p>安装typeScript的时候，帮我们安装好的。 <code>/node_modules/typescript/lib/**</code> 配置<code>tsconfig.json</code>-&gt; <code>compilerOptions.lib</code><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206191536421.png" alt=""></p><h2 id="外部类型声明-第三方" tabindex="-1">外部类型声明（第三方） <a class="header-anchor" href="#外部类型声明-第三方" aria-hidden="true">#</a></h2><p><code>/node_modules/@types/**</code> 对应的type可以到github的DefinitelyTyped项目查找 <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206191538303.png" alt=""></p><h2 id="自定义类型声明" tabindex="-1">自定义类型声明 <a class="header-anchor" href="#自定义类型声明" aria-hidden="true">#</a></h2><p><code>tsconfig.json</code>-&gt;<code>files、include</code> tsc 在编译的时候，会分别加载 lib 的，@types 下的，还有 include 和 files 的文件，进行类型检查。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>这就是 ts 类型声明的三种来源。 声明模块、变量、方法的时候，不需要写实现。它的目的只是<strong>告诉Ts我们当前文件中有这个东西</strong>，Ts编写代码的时候，不爆红</p>',9),n=[s];function o(r,d,l,p,h,_){return i(),t("div",null,n)}const u=e(a,[["render",o]]);export{g as __pageData,u as default};
