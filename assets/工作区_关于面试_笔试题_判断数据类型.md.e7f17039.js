import{_ as t,c as d,o as e,a as o}from"./app.741d02cd.js";const b=JSON.parse('{"title":"判断数据类型的笔记","description":"","frontmatter":{"title":"判断数据类型的笔记","tags":["判断数据类型"],"创建时间":"星期五, 八月 12日 2022, 11:57:17 晚上","修改时间":"星期六, 八月 13日 2022, 3:11:50 下午"},"headers":[{"level":2,"title":"Typeof","slug":"typeof","link":"#typeof","children":[{"level":3,"title":"Instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":3,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"Object.prototype.toString","slug":"object-prototype-tostring","link":"#object-prototype-tostring","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"工作区/关于面试/笔试题/判断数据类型.md"}'),c={name:"工作区/关于面试/笔试题/判断数据类型.md"},r=o('<p>#面试题 #判断数据类型</p><h1 id="判断数据类型的笔记" tabindex="-1">判断数据类型的笔记 <a class="header-anchor" href="#判断数据类型的笔记" aria-hidden="true">#</a></h1><blockquote><p>JavaScript有四种方式判断</p></blockquote><ol><li>typeof</li><li>instanceof</li><li>constructor</li><li>Object.prototype.toString</li></ol><h2 id="typeof" tabindex="-1">Typeof <a class="header-anchor" href="#typeof" aria-hidden="true">#</a></h2><p><code>typeof</code> 操作符返回一个字符串,表示操作值的类型</p><p>利用 <code>typeof</code> 判断数据类型的语法是 <code>typeof target</code></p><blockquote><p>typeof<code>可以准确判断除</code>null<code>之外的所有基本数据类型以及</code>Function<code>对于</code>null<code>及其他引用数据类型都返回</code>object</p></blockquote><h3 id="instanceof" tabindex="-1">Instanceof <a class="header-anchor" href="#instanceof" aria-hidden="true">#</a></h3><p><code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个 <strong>实例对象</strong> 的原型链上</p><p>利用 <code>instanceof</code> 判断数据类型的语法是 <code>target instanceof constructor</code>。</p><blockquote><p>用于判断操作值是否是指定构造函数的实例。</p></blockquote><p>缺点：</p><ol><li>不能判断基本数据类型,因为基本数据类型并不是构造函数的实例，没有原型链。</li><li>因为原型链的终点是 <code>Object.protype =&gt; null</code>,所以引用数据类型的原型链上都会存在 <code>Object.protype</code>,所以引用数据类型 <code>instanceof Object</code> 的时候都返回 <code>true</code>。</li><li>原型链可以被修改，所以结果值不一定准确。</li></ol><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h3><p>利用 <code>constructor</code> 判断数据类型的语法是 <code>target.constructor === constructor</code></p><p>用于判断操作值是否是指定构造函数的实例，可以判断 <code>null</code> 和 <code>undefined</code>除外的所有数据类型，之所以 <code>null</code> 和 <code>undefined</code> 不可以，是因为他们作为 <code>JavaScript</code> 运行环境创建时就存在的基本数据类型，不存在 <code>constructor</code> 属性</p><p>基本数据类型为什么会有 <code>constructor</code> 属性呢？ 是因为基本数据类型获取 <code>constructor</code> 属性的时候，<code>JavaScript</code> 自动将基本数据类型的值转为包装对象实例，并在使用后立刻销毁实例。</p><p>缺点：<code>constructor</code> 属性可以被修改，所以结果值不一定准确。</p><h3 id="object-prototype-tostring" tabindex="-1">Object.prototype.toString <a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a></h3><p>返回对象的类型字符串.</p><p>利用 <code>Object.prototype.toString</code> 判断数据类型的语法是 <code>Object.prototype.toString.call(target)</code></p><p>可以准确判断所有数据类型。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><table><thead><tr><th></th><th>typeof</th><th>instanceof</th><th>constructor</th><th>Object.prototype.toString</th></tr></thead><tbody><tr><td>number</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>string</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>boolean</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>symbol</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>[]</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>{}</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>function() {}</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>undefined</td><td>❌</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>null</td><td>❌</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>new Date()</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>/\\d/g</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>new Error()</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/7049383966700208165" target="_blank" rel="noreferrer">判断类型</a></p>',27),n=[r];function a(i,l,p,s,h,u){return e(),d("div",null,n)}const _=t(c,[["render",a]]);export{b as __pageData,_ as default};
