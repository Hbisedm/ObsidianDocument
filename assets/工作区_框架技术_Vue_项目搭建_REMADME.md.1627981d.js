import{_ as s,c as n,o as a,a as l}from"./app.e5db1f59.js";const D=JSON.parse('{"title":"项目搭建","description":"","frontmatter":{"title":"项目搭建","tags":["项目搭建"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期四, 七月 28日 2022, 1:38:48 下午"},"headers":[{"level":2,"title":"代码规范","slug":"代码规范","link":"#代码规范","children":[{"level":3,"title":"1. 集成editorconfig配置","slug":"_1-集成editorconfig配置","link":"#_1-集成editorconfig配置","children":[]},{"level":3,"title":"2. prettier配置","slug":"_2-prettier配置","link":"#_2-prettier配置","children":[]},{"level":3,"title":"3. Eslint","slug":"_3-eslint","link":"#_3-eslint","children":[]},{"level":3,"title":"4. Husky","slug":"_4-husky","link":"#_4-husky","children":[]}]}],"relativePath":"工作区/框架技术/Vue/项目搭建/REMADME.md"}'),e={name:"工作区/框架技术/Vue/项目搭建/REMADME.md"},p=l(`<p>#Vue #项目搭建</p><h1 id="项目搭建" tabindex="-1">项目搭建 <a class="header-anchor" href="#项目搭建" aria-hidden="true">#</a></h1><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206251022208.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206251028560.png" alt=""></p><h2 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-hidden="true">#</a></h2><h3 id="_1-集成editorconfig配置" tabindex="-1">1. 集成editorconfig配置 <a class="header-anchor" href="#_1-集成editorconfig配置" aria-hidden="true">#</a></h3><blockquote><p>配置IDE的工具</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"># http://editorconfig.org</span></span>
<span class="line"><span style="color:#A6ACCD;">root = true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[*] # 表示所有文件适用</span></span>
<span class="line"><span style="color:#A6ACCD;">charset = utf-8 # 设置文件字符集为utf-8</span></span>
<span class="line"><span style="color:#A6ACCD;">indent_style = space # 缩进风格(tab | space)</span></span>
<span class="line"><span style="color:#A6ACCD;">indent_size = 2 # 缩进大小</span></span>
<span class="line"><span style="color:#A6ACCD;">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span></span>
<span class="line"><span style="color:#A6ACCD;">trim_trailing_whitespace = true # 去除行首的人一空白字符</span></span>
<span class="line"><span style="color:#A6ACCD;">insert_final_newline = true #始终在文件末尾插入一个新行</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[*.md]</span></span>
<span class="line"><span style="color:#A6ACCD;">max_line_length = off</span></span>
<span class="line"><span style="color:#A6ACCD;">trim_trailing_whitespace = false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>VScode中需要安装插件 <strong>EditorConfig for VS Code</strong>，WebStorm不需要。</p><h3 id="_2-prettier配置" tabindex="-1">2. prettier配置 <a class="header-anchor" href="#_2-prettier配置" aria-hidden="true">#</a></h3><blockquote><p>代码格式化工具</p></blockquote><ol><li>安装prettier</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install prettier -D</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>配置.prettierrc文件</li></ol><ul><li>useTabs: 使用tab缩进还是空格缩进，选择false；</li><li>tabWidth:tab是空格的情况下，是几个空格，选择2个；</li><li>printWidth:当行字符的长度，推荐80，也有人喜欢100或者120；</li><li>singleQuote:使用单引号还是双引号，选择true，使用单引号；</li><li>trailingComma:在多行输入的尾逗号是否添加，设置为 none</li><li>semi:语句末尾是否要加分号，默认值true，选择false表示不加；</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;useTabs&quot;: false,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;tabWidth&quot;: 2,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;printWidth&quot;: 80,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;singleQuote&quot;: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;trailingComma&quot;: &quot;none&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;semi&quot;: false</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="3"><li>配置.prettierignore忽略文件</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">/dist/*</span></span>
<span class="line"><span style="color:#A6ACCD;">.local</span></span>
<span class="line"><span style="color:#A6ACCD;">.output.js</span></span>
<span class="line"><span style="color:#A6ACCD;">/node_modules/**</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">**/*.svg</span></span>
<span class="line"><span style="color:#A6ACCD;">**/*.sh</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">/public/*</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="4"><li>VScode插件</li></ol><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206251352093.png" alt=""></p><ol start="5"><li>package.json编写script</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">   	&quot;prettier&quot;: &quot;prettier --write .&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">   }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_3-eslint" tabindex="-1">3. Eslint <a class="header-anchor" href="#_3-eslint" aria-hidden="true">#</a></h3><blockquote><p>代码规范工具</p></blockquote><ol><li>当与prettier发生冲突时，安装2个开发依赖</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install eslint-plugin-prettier eslint-config-prettier -D</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>修改.eslintrc.js</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:vue/vue3-essential</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint:recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vue/typescript/recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vue/prettier</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vue/prettier/@typescript-eslint</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:prettier/recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//加入这个规范，会覆盖上面的</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>重启vscode</li></ol><h3 id="_4-husky" tabindex="-1">4. Husky <a class="header-anchor" href="#_4-husky" aria-hidden="true">#</a></h3><blockquote><p>git钩子拦截工具</p></blockquote><p>虽然我们已经要求项目使用eslint，但是不能保证组员提交代码之前都将eslint中的问题解决掉了：</p><ul><li>也就是我们希望保证代码仓库中的代码都是符合eslint规范的</li><li>那么我们需要在组员执行 git commit 命令的时候对其进行校验，如果不符合eslint规范，那么自动通过规范进行修复；</li><li>husky是一个git hook工具，可以帮助我们触发git提交的各个阶段：pre-commit、commit-msg、 pre-push</li></ul><p>这里我们可以使用自动配置命令：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npx husky-init </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> npm install</span></span>
<span class="line"></span></code></pre></div><p>这里帮助我们完成三件事</p><ol><li>安装husky的相关依赖</li><li>在项目根目录下创建.husky文件夹</li><li>在package.json添加一个脚本</li><li>修改pre-commit脚本 <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206251437802.png" alt=""></li><li>测试有错误规范代码的提交， 运行<code>git commit -m &#39;xxx&#39;</code>时候发现自动运行了<code>vue-cli-service lint</code>，而<code>vue-cli-service lint</code>里面有<code>--fix</code>参数，自动帮我们做了修正。 所以提交后的代码，会符合我们eslint的规范。</li></ol><h4 id="提交信息的规范-commitizen" tabindex="-1">提交信息的规范-commitizen <a class="header-anchor" href="#提交信息的规范-commitizen" aria-hidden="true">#</a></h4><ul><li>Commitizen是一个帮助我们编写规范 commit message 的工具</li></ul><ol><li>安装commitizen</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install commitizen -D</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>安装cz-conventional-changelog， 并初始化cz-conventional-changelog</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npx commitizen init cz-conventional-changelog --save-dev --save-exact</span></span>
<span class="line"></span></code></pre></div><p>这个命令回帮助我们安装cz-conventional-changelog 并且在package.json中进行配置 ⚠️upload failed, check dev console</p><p>这个时候我们提交代码需要npx cz</p><ul><li><p>第一步是选择type，本次更新的类型 | Type | 作用 | | -------- | --------------------------------------------- | | feat | 新增特性 | | fix | 修复Bug | | docs | 修改文档 | | style | 代码格式修改 | | refactor | 代码重构 | | perf | 改善性能 | | test | 测试 | | build | 变更项目 | | ci | 更高持续集成软件的配置和package中的scrpit命令 | | chore | 变更构建流程或辅助工具（比如更改测试环境） | | revert | 代码回退 |</p></li><li><p>第二步 选择本次修改的范围（作用域）</p></li><li><p>第三步 精短的描述</p></li><li><p>第四步 长描述</p></li><li><p>第五步 是否是一次大更新</p></li><li><p>第六步 是否有影响或者开启了一个issue</p></li></ul><h4 id="提交信息的验证-commitlint" tabindex="-1">提交信息的验证-commitlint <a class="header-anchor" href="#提交信息的验证-commitlint" aria-hidden="true">#</a></h4><p>如果我们按照cz来规范了提交风格，但是依然有同事通过 git commit 按照不规范的格式提交应该怎么办呢？</p><ul><li>我们可以通过commitlint来限制提交；</li></ul><ol><li>安装@commitlint/config-conventional和@commitlint/cli</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm i @commitlint/config-conventional @commitlint/cli -D</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>在<strong>根目录</strong>创建commit.config.js文件，配置commitlint</li></ol><div class="language-JS"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@commitlint/config-conventional</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>使用husky生成commit-msg文件，验证提交信息：</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npx husky add .husky/commit-msg </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npx --no-install commitlint --edit </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><h5 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-hidden="true">#</a></h5><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206251553993.png" alt=""></p><p>最后我们可以在package.json中添加个新脚本，每次提交代码就可以使用<code>npm run commit</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">commit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cz</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,59),o=[p];function t(i,c,r,d,C,y){return a(),n("div",null,o)}const A=s(e,[["render",t]]);export{D as __pageData,A as default};
