import{_ as e,c as o,o as r,a as t}from"./app.e5db1f59.js";const m=JSON.parse('{"title":"for循环遍历的笔记","description":"","frontmatter":{"title":"for循环遍历的笔记","tags":["for循环遍历"],"创建时间":"星期一, 八月 15日 2022, 10:56:06 晚上","修改时间":"星期一, 八月 15日 2022, 11:00:40 晚上"},"headers":[{"level":2,"title":"every 和 some 不完全属于数组操作方法","slug":"every-和-some-不完全属于数组操作方法","link":"#every-和-some-不完全属于数组操作方法","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"工作区/基本知识/JavaScript/JavaScript数组遍历的方式.md"}'),a={name:"工作区/基本知识/JavaScript/JavaScript数组遍历的方式.md"},c=t('<p>#for循环遍历 #数组循环</p><h1 id="for循环遍历的笔记" tabindex="-1">for循环遍历的笔记 <a class="header-anchor" href="#for循环遍历的笔记" aria-hidden="true">#</a></h1><p>有6种循环方式</p><ul><li>for</li><li>for-of</li><li>forEach</li><li>filter</li><li>map</li><li>for-in</li></ul><p>性能对比 <code>for</code> &gt; <code>for-of</code> &gt; <code>forEach</code> &gt; <code>filter</code> &gt; <code>map</code> &gt; <code>for-in</code></p><p>这很明显处理大量循环数据的时候还是要使用古老<code>for</code>循环效率最好,但也不是不使用<code>for-in</code>,其实很多时候都要根据实际应该场景的,<code>for-in</code>更多使用在遍历对象属性上面,<code>for-in</code>在遍历的过程中还会遍历继承链,所以这就是它效率比较慢的原因,比如<code>map</code> 速率不高,不过处理在Es6实现数组功能上面非常好用方便,轻松影射创建新数组.或者例如使用<a href="https://link.juejin.cn?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fiterator" title="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noreferrer"><strong>Iterator</strong></a>属性也是行的,所以每个循环都有合适使用的地方.</p><ul><li>some</li><li>every</li></ul><h2 id="every-和-some-不完全属于数组操作方法" tabindex="-1"><code>every</code> 和 <code>some</code> 不完全属于数组操作方法 <a class="header-anchor" href="#every-和-some-不完全属于数组操作方法" aria-hidden="true">#</a></h2><p><code>every</code> 和 <code>some</code> 都是判断条件直接返回整个数组Boolean类型的方法.<code>every</code>速度会比<code>some</code>快很多.</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208152259966.png" alt=""></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/6844903538175262734" target="_blank" rel="noreferrer">JavaScript的循环对比</a></p>',12),i=[c];function d(n,l,s,p,f,_){return r(),o("div",null,i)}const g=e(a,[["render",d]]);export{m as __pageData,g as default};
