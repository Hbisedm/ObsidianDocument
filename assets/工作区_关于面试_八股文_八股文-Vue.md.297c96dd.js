import{_ as e,c as l,o as a,a as s}from"./app.e5db1f59.js";const g=JSON.parse('{"title":"Vue八股文","description":"","frontmatter":{"title":"Vue八股文","创建时间":"星期二, 十一月 1日 2022, 5:13:10 下午","修改时间":"星期一, 十一月 7日 2022, 9:22:59 晚上"},"headers":[{"level":2,"title":"为什么 Vue 3 要舍弃 Object.defineProperty ，换成 Proxy 呢？","slug":"为什么-vue-3-要舍弃-object-defineproperty-换成-proxy-呢","link":"#为什么-vue-3-要舍弃-object-defineproperty-换成-proxy-呢","children":[]},{"level":2,"title":"01-Vue组件之间通信方式有哪些","slug":"_01-vue组件之间通信方式有哪些","link":"#_01-vue组件之间通信方式有哪些","children":[{"level":3,"title":"思路分析：","slug":"思路分析","link":"#思路分析","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例","link":"#回答范例","children":[]},{"level":3,"title":"$attrs","slug":"attrs","link":"#attrs","children":[]}]},{"level":2,"title":"02-v-if和v-for哪个优先级更高？","slug":"_02-v-if和v-for哪个优先级更高","link":"#_02-v-if和v-for哪个优先级更高","children":[{"level":3,"title":"分析：","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"思路分析：","slug":"思路分析-1","link":"#思路分析-1","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例-1","link":"#回答范例-1","children":[]}]},{"level":2,"title":"03-简述 Vue 的生命周期以及每个阶段做的事","slug":"_03-简述-vue-的生命周期以及每个阶段做的事","link":"#_03-简述-vue-的生命周期以及每个阶段做的事","children":[{"level":3,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-2","link":"#回答范例-2","children":[]},{"level":3,"title":"可能的追问","slug":"可能的追问","link":"#可能的追问","children":[]}]},{"level":2,"title":"04-能说一说双向绑定使用和原理吗","slug":"_04-能说一说双向绑定使用和原理吗","link":"#_04-能说一说双向绑定使用和原理吗","children":[{"level":3,"title":"题目分析：","slug":"题目分析","link":"#题目分析","children":[]},{"level":3,"title":"思路分析：","slug":"思路分析-2","link":"#思路分析-2","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例-3","link":"#回答范例-3","children":[]},{"level":3,"title":"可能的追问：","slug":"可能的追问-1","link":"#可能的追问-1","children":[]}]},{"level":2,"title":"05-Vue中如何扩展一个组件","slug":"_05-vue中如何扩展一个组件","link":"#_05-vue中如何扩展一个组件","children":[{"level":3,"title":"答题思路：","slug":"答题思路","link":"#答题思路","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例-4","link":"#回答范例-4","children":[]}]},{"level":2,"title":"06-子组件可以直接改变父组件的数据么，说明原因","slug":"_06-子组件可以直接改变父组件的数据么-说明原因","link":"#_06-子组件可以直接改变父组件的数据么-说明原因","children":[{"level":3,"title":"分析","slug":"分析-1","link":"#分析-1","children":[]},{"level":3,"title":"思路","slug":"思路-1","link":"#思路-1","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-5","link":"#回答范例-5","children":[]}]},{"level":2,"title":"07-Vue要做权限管理该怎么做？控制到按钮级别的权限怎么做？","slug":"_07-vue要做权限管理该怎么做-控制到按钮级别的权限怎么做","link":"#_07-vue要做权限管理该怎么做-控制到按钮级别的权限怎么做","children":[{"level":3,"title":"分析","slug":"分析-2","link":"#分析-2","children":[]},{"level":3,"title":"思路","slug":"思路-2","link":"#思路-2","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-6","link":"#回答范例-6","children":[]}]},{"level":2,"title":"08- 说一说你对vue响应式理解？","slug":"_08-说一说你对vue响应式理解","link":"#_08-说一说你对vue响应式理解","children":[{"level":3,"title":"分析","slug":"分析-3","link":"#分析-3","children":[]},{"level":3,"title":"答题思路：","slug":"答题思路-1","link":"#答题思路-1","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例-7","link":"#回答范例-7","children":[]}]},{"level":2,"title":"09 - 说说你对虚拟 DOM 的理解？","slug":"_09-说说你对虚拟-dom-的理解","link":"#_09-说说你对虚拟-dom-的理解","children":[{"level":3,"title":"分析","slug":"分析-4","link":"#分析-4","children":[]},{"level":3,"title":"思路","slug":"思路-3","link":"#思路-3","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-8","link":"#回答范例-8","children":[]}]},{"level":2,"title":"10 - 你了解diff算法吗？","slug":"_10-你了解diff算法吗","link":"#_10-你了解diff算法吗","children":[{"level":3,"title":"分析","slug":"分析-5","link":"#分析-5","children":[]},{"level":3,"title":"思路","slug":"思路-4","link":"#思路-4","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-9","link":"#回答范例-9","children":[]}]},{"level":2,"title":"11 - 你知道哪些vue3新特性","slug":"_11-你知道哪些vue3新特性","link":"#_11-你知道哪些vue3新特性","children":[{"level":3,"title":"分析","slug":"分析-6","link":"#分析-6","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-10","link":"#回答范例-10","children":[]}]},{"level":2,"title":"12 - 怎么定义动态路由？怎么获取传过来的动态参数？","slug":"_12-怎么定义动态路由-怎么获取传过来的动态参数","link":"#_12-怎么定义动态路由-怎么获取传过来的动态参数","children":[{"level":3,"title":"分析","slug":"分析-7","link":"#分析-7","children":[]},{"level":3,"title":"思路","slug":"思路-5","link":"#思路-5","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-11","link":"#回答范例-11","children":[]}]},{"level":2,"title":"13-如果让你从零开始写一个vue路由，说说你的思路","slug":"_13-如果让你从零开始写一个vue路由-说说你的思路","link":"#_13-如果让你从零开始写一个vue路由-说说你的思路","children":[{"level":3,"title":"思路分析：","slug":"思路分析-3","link":"#思路分析-3","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例-12","link":"#回答范例-12","children":[]}]},{"level":2,"title":"14-能说说key的作用吗？","slug":"_14-能说说key的作用吗","link":"#_14-能说说key的作用吗","children":[{"level":3,"title":"分析：","slug":"分析-8","link":"#分析-8","children":[]},{"level":3,"title":"思路分析：","slug":"思路分析-4","link":"#思路分析-4","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例-13","link":"#回答范例-13","children":[]}]},{"level":2,"title":"15-说说nextTick的使用和原理？","slug":"_15-说说nexttick的使用和原理","link":"#_15-说说nexttick的使用和原理","children":[{"level":3,"title":"分析","slug":"分析-9","link":"#分析-9","children":[]},{"level":3,"title":"答题思路","slug":"答题思路-2","link":"#答题思路-2","children":[]},{"level":3,"title":"回答范例：","slug":"回答范例-14","link":"#回答范例-14","children":[]}]},{"level":2,"title":"16-watch和computed的区别以及选择?","slug":"_16-watch和computed的区别以及选择","link":"#_16-watch和computed的区别以及选择","children":[{"level":3,"title":"思路分析","slug":"思路分析-5","link":"#思路分析-5","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-15","link":"#回答范例-15","children":[]}]},{"level":2,"title":"17-说一下 Vue 子组件和父组件创建和挂载顺序","slug":"_17-说一下-vue-子组件和父组件创建和挂载顺序","link":"#_17-说一下-vue-子组件和父组件创建和挂载顺序","children":[{"level":3,"title":"思路分析","slug":"思路分析-6","link":"#思路分析-6","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-16","link":"#回答范例-16","children":[]}]},{"level":2,"title":"18-怎么缓存当前的组件？缓存后怎么更新？","slug":"_18-怎么缓存当前的组件-缓存后怎么更新","link":"#_18-怎么缓存当前的组件-缓存后怎么更新","children":[{"level":3,"title":"思路","slug":"思路-6","link":"#思路-6","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-17","link":"#回答范例-17","children":[]}]},{"level":2,"title":"19-从0到1自己构架一个vue项目，说说有哪些步骤、哪些重要插件、目录结构你会怎么组织","slug":"_19-从0到1自己构架一个vue项目-说说有哪些步骤、哪些重要插件、目录结构你会怎么组织","link":"#_19-从0到1自己构架一个vue项目-说说有哪些步骤、哪些重要插件、目录结构你会怎么组织","children":[{"level":3,"title":"思路","slug":"思路-7","link":"#思路-7","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-18","link":"#回答范例-18","children":[]}]},{"level":2,"title":"20-实际工作中，你总结的vue最佳实践有哪些？","slug":"_20-实际工作中-你总结的vue最佳实践有哪些","link":"#_20-实际工作中-你总结的vue最佳实践有哪些","children":[{"level":3,"title":"思路","slug":"思路-8","link":"#思路-8","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-19","link":"#回答范例-19","children":[]}]},{"level":2,"title":"21 - 简单说一说你对vuex理解？","slug":"_21-简单说一说你对vuex理解","link":"#_21-简单说一说你对vuex理解","children":[{"level":3,"title":"思路","slug":"思路-9","link":"#思路-9","children":[]},{"level":3,"title":"范例","slug":"范例","link":"#范例","children":[]}]},{"level":2,"title":"22-说说从 Template 到 Render 处理过程","slug":"_22-说说从-template-到-render-处理过程","link":"#_22-说说从-template-到-render-处理过程","children":[{"level":3,"title":"分析","slug":"分析-10","link":"#分析-10","children":[]},{"level":3,"title":"思路","slug":"思路-10","link":"#思路-10","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-20","link":"#回答范例-20","children":[]},{"level":3,"title":"可能的追问","slug":"可能的追问-2","link":"#可能的追问-2","children":[]}]},{"level":2,"title":"23-Vue实例挂载的过程中发生了什么?","slug":"_23-vue实例挂载的过程中发生了什么","link":"#_23-vue实例挂载的过程中发生了什么","children":[{"level":3,"title":"分析","slug":"分析-11","link":"#分析-11","children":[]},{"level":3,"title":"回答范例","slug":"回答范例-21","link":"#回答范例-21","children":[]},{"level":3,"title":"可能的追问","slug":"可能的追问-3","link":"#可能的追问-3","children":[]}]}],"relativePath":"工作区/关于面试/八股文/八股文-Vue.md"}'),n={name:"工作区/关于面试/八股文/八股文-Vue.md"},i=s(`<p>#vue #八股文</p><h1 id="vue八股文" tabindex="-1">Vue八股文 <a class="header-anchor" href="#vue八股文" aria-hidden="true">#</a></h1><h2 id="为什么-vue-3-要舍弃-object-defineproperty-换成-proxy-呢" tabindex="-1">为什么 Vue 3 要舍弃 <code>Object.defineProperty</code> ，换成 <code>Proxy</code> 呢？ <a class="header-anchor" href="#为什么-vue-3-要舍弃-object-defineproperty-换成-proxy-呢" aria-hidden="true">#</a></h2><p>主要原因在于 <code>Object.defineProperty</code> 有以下的不足：</p><ol><li>无法监听数组下标的变化，通过 <code>arr[i] = newValue</code> 这样的操作无法实时响应</li><li>无法监听数组长度的变化，例如通过 <code>arr.length = 10</code> 去修改数组长度，无法响应</li><li>只能监听对象的属性，对于整个对象需要遍历，特别是多级对象更是要通过嵌套来深度监听</li><li>使用 <code>Object.assign()</code> 等方法给对象添加新属性时，也不会触发更新</li><li>更多细节上的问题 …</li></ol><h2 id="_01-vue组件之间通信方式有哪些" tabindex="-1">01-Vue组件之间通信方式有哪些 <a class="header-anchor" href="#_01-vue组件之间通信方式有哪些" aria-hidden="true">#</a></h2><blockquote><p>vue是组件化开发框架，所以对于vue应用来说组件间的数据通信非常重要。 此题主要考查大家vue基本功，<strong>对于vue基础api运用熟练度</strong>。 另外一些边界知识如provide/inject/$attrs则体现了面试者的知识广度。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf775050e1f948bfa52f3c79b3a3e538~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="通信"></p><h3 id="思路分析" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析" aria-hidden="true">#</a></h3><ol><li>总述知道的所有方式</li><li>按组件关系阐述使用场景</li></ol><h3 id="回答范例" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例" aria-hidden="true">#</a></h3><ol><li>组件通信常用方式有以下8种：</li></ol><ul><li>props</li><li><code>$emit/~~$on~~</code></li><li><code>~~$children~~/$parent</code></li><li><code>$attrs/~~$listeners~~</code></li><li>ref</li><li>$root</li><li>eventbus</li><li>vuex</li></ul><ol start="2"><li>根据组件之间关系讨论组件通信最为清晰有效</li></ol><ul><li><p>父子组件</p><ul><li><code>props</code>/<code>$emit</code>/<code>$parent</code>/<code>ref</code>/<code>$attrs</code></li></ul></li><li><p>兄弟组件</p><ul><li><code>$parent</code>/<code>$root</code>/<code>eventbus</code>/<code>vuex</code></li></ul></li><li><p>跨层级关系</p><ul><li><code>eventbus</code>/<code>vuex</code>/<code>provide</code>+<code>inject</code></li></ul></li></ul><h3 id="attrs" tabindex="-1">$attrs <a class="header-anchor" href="#attrs" aria-hidden="true">#</a></h3><p>一般<code>$attrs</code>使用v-bind 传递给孙组件 [[基本知识#V-bind]]</p><h4 id="在vue3中的-attrs的变化" tabindex="-1">在vue3中的$attrs的变化 <a class="header-anchor" href="#在vue3中的-attrs的变化" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$listeners已被删除合并到$attrs中。</span></span>
<span class="line"><span style="color:#A6ACCD;">$attrs现在包括class和style属性。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">也就是说在vue3中$listeners不存在了。vue2中$listeners是单独存在的。</span></span>
<span class="line"><span style="color:#A6ACCD;">在vue3 $attrs包括class和style属性</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vue2中 $attrs 不包含class和style属性。</span></span>
<span class="line"></span></code></pre></div><h4 id="在vue2中的-attrs" tabindex="-1">在vue2中的$attrs <a class="header-anchor" href="#在vue2中的-attrs" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">在Vue 2中，</span><span style="color:#82AAFF;">attrs里面包含着上层组件传递的所有数据</span><span style="color:#A6ACCD;">(除style和class)</span></span>
<span class="line"><span style="color:#A6ACCD;">当一个组件声明了prop时候，attrs里面包含除去prop里面的数据剩下的数据。</span></span>
<span class="line"><span style="color:#FFCB6B;">结合inheritAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">，可以将传递下来的数据应用于其他元素，而不是根元素：</span></span>
<span class="line"></span></code></pre></div><h4 id="调用父组件的方法" tabindex="-1">调用父组件的方法 <a class="header-anchor" href="#调用父组件的方法" aria-hidden="true">#</a></h4><ol><li>emit</li><li>provide/inject <a href="https://juejin.cn/post/6885219313901371399" target="_blank" rel="noreferrer">看这个操作</a></li></ol><h2 id="_02-v-if和v-for哪个优先级更高" tabindex="-1">02-v-if和v-for哪个优先级更高？ <a class="header-anchor" href="#_02-v-if和v-for哪个优先级更高" aria-hidden="true">#</a></h2><h3 id="分析" tabindex="-1">分析： <a class="header-anchor" href="#分析" aria-hidden="true">#</a></h3><p>此题考查常识，文档中曾有详细说明<a href="https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fstyle-guide%2F%23%25E9%2581%25BF%25E5%2585%258D-v-if-%25E5%2592%258C-v-for-%25E7%2594%25A8%25E5%259C%25A8%25E4%25B8%2580%25E8%25B5%25B7%25E5%25BF%2585%25E8%25A6%2581" title="https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%BF%85%E8%A6%81" target="_blank" rel="noreferrer">v2</a>|<a href="https://link.juejin.cn/?target=https%3A%2F%2Fstaging.vuejs.org%2Fstyle-guide%2Frules-essential.html%23avoid-v-if-with-v-for" title="https://staging.vuejs.org/style-guide/rules-essential.html#avoid-v-if-with-v-for" target="_blank" rel="noreferrer">v3</a>；也是一个很好的实践题目，项目中经常会遇到，能够看出面试者api熟悉程度和应用能力。</p><h3 id="思路分析-1" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析-1" aria-hidden="true">#</a></h3><ol><li>先给出结论</li><li>为什么是这样的，说出细节</li><li>哪些场景可能导致我们这样做，该怎么处理</li><li>总结，拔高</li></ol><h3 id="回答范例-1" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-1" aria-hidden="true">#</a></h3><ol><li><p>实践中<strong>不应该把v-for和v-if放一起</strong></p></li><li><p>在<strong>vue2中</strong>，<strong>v-for的优先级是高于v-if</strong>，把它们放在一起，输出的渲染函数中可以看出会<strong>先执行循环再判断条件</strong>，哪怕我们只渲染列表中一小部分元素，<strong>也得在每次重渲染的时候遍历整个列表，这会比较浪费</strong>；另外需要注意的是在<strong>vue3中则完全相反，v-if的优先级高于v-for</strong>，所以v-if执行时，它调用的变量还不存在，就会导致异常</p></li><li><p>通常有两种情况下导致我们这样做：</p><ul><li><p>为了<strong>过滤列表中的项目</strong> (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>)。此时定义一个计算属性 (比如 <code>activeUsers</code>)，让其返回过滤后的列表即可（比如<code>users.filter(u=&gt;u.isActive)</code>）。</p></li><li><p>为了<strong>避免渲染本应该被隐藏的列表</strong> (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>)。此时把 <code>v-if</code> 移动至容器元素上 (比如 <code>ul</code>、<code>ol</code>)或者外面包一层<code>template</code>即可。</p></li></ul></li><li><p>文档中明确指出<strong>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上</strong>，显然这是一个重要的注意事项。</p></li><li><p>源码里面关于代码生成的部分，能够清晰的看到是先处理v-if还是v-for，顺序上vue2和vue3正好相反，因此产生了一些症状的不同，<strong>但是不管怎样都是不能把它们写在一起的</strong>。</p></li></ol><h2 id="_03-简述-vue-的生命周期以及每个阶段做的事" tabindex="-1">03-简述 Vue 的生命周期以及每个阶段做的事 <a class="header-anchor" href="#_03-简述-vue-的生命周期以及每个阶段做的事" aria-hidden="true">#</a></h2><p>必问题目，考查vue基础知识。</p><h3 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-hidden="true">#</a></h3><ol><li>给出概念</li><li>列举生命周期各阶段</li><li>阐述整体流程</li><li>结合实践</li><li>扩展：vue3变化</li></ol><h3 id="回答范例-2" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-2" aria-hidden="true">#</a></h3><ol><li><p>每个Vue组件实例被创建后都会经过一系列初始化步骤，比如，它需要数据观测，模板编译，挂载实例到dom上，以及数据变化时更新dom。这个过程中会运行叫做生命周期钩子的函数，以便用户在特定阶段有机会添加他们自己的代码。</p></li><li><p>Vue生命周期总共可以分为8个阶段：<strong>创建前后, 载入前后, 更新前后, 销毁前后</strong>，以及一些特殊场景的生命周期。vue3中新增了三个用于调试和服务端渲染场景。</p></li><li><p>Vue 生命周期流程图</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/779f7121823d4118a5b6ad2aa4007c28~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><ol start="4"><li>结合实践</li></ol><p><strong>beforeCreate</strong>：通常用于插件开发中执行一些初始化任务</p><p><strong>created</strong>：组件初始化完毕，可以访问各种数据，获取接口数据等</p><p><strong>mounted</strong>：dom已创建，可用于获取访问数据和dom元素；访问子组件等。</p><p><strong>beforeUpdate</strong>：此时<code>view</code>层还未更新，可用于获取更新前各种状态</p><p><strong>updated</strong>：完成<code>view</code>层的更新，更新后，所有状态已是最新</p><p><strong>beforeunmount</strong>：实例被销毁前调用，可用于一些定时器或订阅的取消</p><p><strong>unmounted</strong>：销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</p><h3 id="可能的追问" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问" aria-hidden="true">#</a></h3><ol><li>setup和created谁先执行？</li><li>setup中为什么没有beforeCreate和created？</li></ol><h2 id="_04-能说一说双向绑定使用和原理吗" tabindex="-1">04-能说一说双向绑定使用和原理吗 <a class="header-anchor" href="#_04-能说一说双向绑定使用和原理吗" aria-hidden="true">#</a></h2><h3 id="题目分析" tabindex="-1">题目分析： <a class="header-anchor" href="#题目分析" aria-hidden="true">#</a></h3><p>双向绑定是<code>vue</code>的特色之一，开发中必然会用到的知识点，然而此题还问了实现原理，升级为深度考查。</p><hr><h3 id="思路分析-2" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析-2" aria-hidden="true">#</a></h3><ol><li>给出双绑定义</li><li>双绑带来的好处</li><li>在哪使用双绑</li><li>使用方式、使用细节、vue3变化</li><li>原理实现描述</li></ol><hr><h3 id="回答范例-3" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-3" aria-hidden="true">#</a></h3><ol><li>vue中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图中变化能改变该值。</li><li><code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>。使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li><li>通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li><li>通过<code>&lt;input v-model=&quot;xxx&quot;&gt;</code>的方式将xxx的值绑定到表单元素value上；对于checkbox，可以使用<code>true-value</code>和false-value指定特殊的值，对于radio可以使用value指定特殊的值；对于select可以通过options元素的value设置特殊的值；还可以结合.lazy,.number,.trim对v-mode的行为做进一步限定；<code>v-model</code>用在自定义组件上时又会有很大不同，vue3中它类似于<code>sync</code>修饰符，最终展开的结果是modelValue属性和update:modelValue事件；vue3中我们甚至可以用参数形式指定多个不同的绑定，例如v-model:foo和v-model:bar，非常强大！</li><li><code>v-model</code>是一个指令，它的神奇魔法实际上是vue的编译器完成的。我做过测试，包含<code>v-model</code>的模板，转换为渲染函数之后，实际上还是是value属性的绑定以及input事件监听，事件回调函数中会做相应变量更新操作。编译器根据表单元素的不同会展开不同的DOM属性和事件对，比如text类型的input和textarea会展开为value和input事件；checkbox和radio类型的input会展开为checked和change事件；select用value作为属性，用change作为事件。</li></ol><hr><h3 id="可能的追问-1" tabindex="-1">可能的追问： <a class="header-anchor" href="#可能的追问-1" aria-hidden="true">#</a></h3><ol><li><p><code>v-model</code>和<code>sync</code>修饰符有什么区别 <a href="https://juejin.cn/post/7106466969847201799" target="_blank" rel="noreferrer">参考</a> <a href="https://juejin.cn/post/7031839103914246181#heading-0" target="_blank" rel="noreferrer">参考2</a> [[v-model]]</p><p><code>.sync</code> 在vue3中是去掉的，它在vue2中表现的功能，可以在<code>vue3</code>的<code>v-model</code>实现 <code>v-model</code> 在vue2只能一个， 而vue3可以多个</p></li><li><p>自定义组件使用<code>v-model</code>如果想要改变事件名或者属性名应该怎么做</p></li></ol><h2 id="_05-vue中如何扩展一个组件" tabindex="-1">05-Vue中如何扩展一个组件 <a class="header-anchor" href="#_05-vue中如何扩展一个组件" aria-hidden="true">#</a></h2><p>此题属于实践题，考察大家对vue常用api使用熟练度，答题时不仅要列出这些解决方案，同时最好说出他们异同。</p><h3 id="答题思路" tabindex="-1">答题思路： <a class="header-anchor" href="#答题思路" aria-hidden="true">#</a></h3><ol><li><p>按照逻辑扩展和内容扩展来列举，</p><ul><li><p>逻辑扩展有：mixins、extends、composition api；</p></li><li><p>内容扩展有slots；</p></li></ul></li><li><p>分别说出他们使用方法、场景差异和问题。</p></li><li><p>作为扩展，还可以说说vue3中新引入的composition api带来的变化</p></li></ol><h3 id="回答范例-4" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-4" aria-hidden="true">#</a></h3><ol><li><p>常见的组件扩展方法有：mixins，slots，extends等</p></li><li><p>混入mixins是分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p></li><li><p>插槽主要用于vue组件中的内容分发，也可以用于组件扩展。 如果要精确分发到不同位置可以使用具名插槽，如果要使用子组件中的数据可以使用作用域插槽。</p></li><li><p>组件选项中还有一个不太常用的选项extends，也可以起到扩展组件的目的</p></li><li><p>混入的数据和方法<strong>不能明确判断来源</strong>且可能和当前组件内变量<strong>产生命名冲突</strong>，vue3中引入的composition api，可以很好解决这些问题，利用独立出来的响应式模块可以很方便的编写独立逻辑并提供响应式的数据，然后在setup选项中组合使用，增强代码的可读性和维护性。例如：</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 复用逻辑1</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useXX</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;">// 复用逻辑2</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useYY</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;">// 逻辑组合</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Comp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">xx</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useXX</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">yy</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useYY</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">xx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">yy</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_06-子组件可以直接改变父组件的数据么-说明原因" tabindex="-1">06-子组件可以直接改变父组件的数据么，说明原因 <a class="header-anchor" href="#_06-子组件可以直接改变父组件的数据么-说明原因" aria-hidden="true">#</a></h2><h3 id="分析-1" tabindex="-1">分析 <a class="header-anchor" href="#分析-1" aria-hidden="true">#</a></h3><p>这是一个实践知识点，组件化开发过程中有个<strong>单项数据流原则</strong>，不在子组件中修改父组件是个常识问题。</p><p>参考文档：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fstaging.vuejs.org%2Fguide%2Fcomponents%2Fprops.html%23one-way-data-flow" title="https://staging.vuejs.org/guide/components/props.html#one-way-data-flow" target="_blank" rel="noreferrer">staging.vuejs.org/guide/compo…</a></p><h3 id="思路-1" tabindex="-1">思路 <a class="header-anchor" href="#思路-1" aria-hidden="true">#</a></h3><ol><li>讲讲单项数据流原则，表明为何不能这么做</li><li>举几个常见场景的例子说说解决方案</li><li>结合实践讲讲如果需要修改父组件状态应该如何做</li></ol><h3 id="回答范例-5" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-5" aria-hidden="true">#</a></h3><ol><li>所有的 prop 都使得其父子之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。另外，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器控制台中发出警告。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#676E95;">// ❌ 下面行为会被警告, props是只读的!</span></span>
<span class="line"><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>实际开发过程中有两个场景会想要修改一个属性：</li></ol><ul><li><strong>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用</strong>。在这种情况下，最好定义一个本地的 data，并将这个 prop 用作其初始值：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">initialCounter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">initialCounter)</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>这个 prop 以一种原始的值传入且需要进行转换</strong>。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">size</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// prop变化，计算属性自动更新</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> normalizedSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>实践中如果确实想要改变父组件属性应该emit一个事件让父组件去做这个变更。注意虽然我们不能直接修改一个传入的对象或者数组类型的prop，但是我们还是能够直接改内嵌的对象或属性。</li></ol><h2 id="_07-vue要做权限管理该怎么做-控制到按钮级别的权限怎么做" tabindex="-1">07-Vue要做权限管理该怎么做？控制到按钮级别的权限怎么做？ <a class="header-anchor" href="#_07-vue要做权限管理该怎么做-控制到按钮级别的权限怎么做" aria-hidden="true">#</a></h2><h3 id="分析-2" tabindex="-1">分析 <a class="header-anchor" href="#分析-2" aria-hidden="true">#</a></h3><p>综合实践题目，实际开发中经常需要面临权限管理的需求，考查实际应用能力。</p><p>权限管理一般需求是两个：页面权限和按钮权限，从这两个方面论述即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/631e5a9510f349e488227498ec6212e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="权限"></p><h3 id="思路-2" tabindex="-1">思路 <a class="header-anchor" href="#思路-2" aria-hidden="true">#</a></h3><ol><li>权限管理需求分析：页面和按钮权限</li><li>权限管理的实现方案：分后端方案和前端方案阐述</li><li>说说各自的优缺点</li></ol><h3 id="回答范例-6" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-6" aria-hidden="true">#</a></h3><ol><li><p>权限管理一般需求是<strong>页面权限</strong>和<strong>按钮权限</strong>的管理</p></li><li><p>具体实现的时候分后端和前端两种方案：</p><p>前端方案会<strong>把所有路由信息在前端配置</strong>，通过路由守卫要求用户登录，用户<strong>登录后根据角色过滤出路由表</strong>。比如我会配置一个<code>asyncRoutes</code>数组，需要认证的页面在其路由的<code>meta</code>中添加一个<code>roles</code>字段，等获取用户角色之后取两者的交集，若结果不为空则说明可以访问。此过滤过程结束，剩下的路由就是该用户能访问的页面，<strong>最后通过<code>router.addRoutes(accessRoutes)</code>方式动态添加路由</strong>即可。</p><p>后端方案会<strong>把所有页面路由信息存在数据库</strong>中，用户登录的时候根据其角色<strong>查询得到其能访问的所有页面路由信息</strong>返回给前端，前端<strong>再通过<code>addRoutes</code>动态添加路由</strong>信息</p><p>按钮权限的控制通常会<strong>实现一个指令</strong>，例如<code>v-permission</code>，<strong>将按钮要求角色通过值传给v-permission指令</strong>，在指令的<code>moutned</code>钩子中可以<strong>判断当前用户角色和按钮是否存在交集</strong>，有则保留按钮，无则移除按钮。</p></li><li><p>纯前端方案的优点是实现简单，不需要额外权限管理页面，但是维护起来问题比较大，有新的页面和角色需求就要修改前端代码重新打包部署；服务端方案就不存在这个问题，通过专门的角色和权限管理页面，配置页面和按钮权限信息到数据库，应用每次登陆时获取的都是最新的路由信息，可谓一劳永逸！</p></li></ol><h2 id="_08-说一说你对vue响应式理解" tabindex="-1">08- 说一说你对vue响应式理解？ <a class="header-anchor" href="#_08-说一说你对vue响应式理解" aria-hidden="true">#</a></h2><h3 id="分析-3" tabindex="-1">分析 <a class="header-anchor" href="#分析-3" aria-hidden="true">#</a></h3><p>这是一道必问题目，但能回答到位的比较少。如果只是看看一些网文，通常没什么底气，经不住面试官推敲，但像我们这样即看过源码还造过轮子的，回答这个问题就会比较有底气啦。</p><h3 id="答题思路-1" tabindex="-1">答题思路： <a class="header-anchor" href="#答题思路-1" aria-hidden="true">#</a></h3><ol><li>啥是响应式？</li><li>为什么vue需要响应式？</li><li>它能给我们带来什么好处？</li><li>vue的响应式是怎么实现的？有哪些优缺点？</li><li>vue3中的响应式的新变化</li></ol><h3 id="回答范例-7" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-7" aria-hidden="true">#</a></h3><ol><li>所谓数据响应式就是<strong>能够使数据变化可以被检测并对这种变化做出响应的机制</strong>。</li><li>MVVM框架中要解决的一个核心问题是连接数据层和视图层，通过<strong>数据驱动</strong>应用，数据变化，视图更新，要做到这点的就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。</li><li>以vue为例说明，通过数据响应式加上虚拟DOM和patch算法，开发人员只需要操作数据，关心业务，完全不用接触繁琐的DOM操作，从而大大提升开发效率，降低开发难度。</li><li>vue2中的数据响应式会根据数据类型来做不同处理，如果是<strong>对象则采用Object.defineProperty()的</strong>方式定义数据拦截，当数据被访问或发生变化时，我们感知并作出响应；如果是<strong>数组则通过覆盖数组对象原型的7个变更方法</strong>，使这些方法可以额外的做更新通知，从而作出响应。这种机制很好的解决了数据响应化的问题，但在实际使用中也存在一些缺点：比如初始化时的递归遍历会造成性能损失；新增或删除属性时需要用户使用Vue.set/delete这样特殊的api才能生效；对于es6中新产生的Map、Set这些数据结构不支持等问题。</li><li>为了解决这些问题，vue3重新编写了这一部分的实现：利用ES6的Proxy代理要响应化的数据，它有很多好处，编程体验是一致的，不需要使用特殊api，初始化性能和内存消耗都得到了大幅改善；另外由于响应化的实现代码抽取为独立的reactivity包，使得我们可以更灵活的使用它，第三方的扩展开发起来更加灵活了。</li></ol><h2 id="_09-说说你对虚拟-dom-的理解" tabindex="-1">09 - 说说你对虚拟 DOM 的理解？ <a class="header-anchor" href="#_09-说说你对虚拟-dom-的理解" aria-hidden="true">#</a></h2><h3 id="分析-4" tabindex="-1">分析 <a class="header-anchor" href="#分析-4" aria-hidden="true">#</a></h3><p>现有框架几乎都引入了虚拟 DOM 来对真实 DOM 进行抽象，也就是现在大家所熟知的 VNode 和 VDOM，那么为什么需要引入虚拟 DOM 呢？围绕这个疑问来解答即可</p><h3 id="思路-3" tabindex="-1">思路 <a class="header-anchor" href="#思路-3" aria-hidden="true">#</a></h3><ol><li>vdom是什么</li><li>引入vdom的好处</li><li>vdom如何生成，又如何成为dom</li><li>在后续的diff中的作用</li></ol><h3 id="回答范例-8" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-8" aria-hidden="true">#</a></h3><ol><li><p>虚拟dom顾名思义就是虚拟的dom对象，它本身就是一个 <code>JavaScript</code> 对象，只不过它是通过不同的属性去描述一个视图结构。</p></li><li><p>通过引入vdom我们可以获得如下好处：</p><p><strong>将真实元素节点抽象成 VNode，有效减少直接操作 dom 次数，从而提高程序性能</strong></p><ul><li>直接操作 dom 是有限制的，比如：diff、clone 等操作，一个真实元素上有许多的内容，如果直接对其进行 diff 操作，会去额外 diff 一些没有必要的内容；同样的，如果需要进行 clone 那么需要将其全部内容进行复制，这也是没必要的。但是，如果将这些操作转移到 JavaScript 对象上，那么就会变得简单了。</li><li>操作 dom 是比较昂贵的操作，频繁的dom操作容易引起页面的重绘和回流，但是通过抽象 VNode 进行中间处理，可以有效减少直接操作dom的次数，从而减少页面重绘和回流。</li></ul><p><strong>方便实现跨平台</strong></p><ul><li>同一 VNode 节点可以渲染成不同平台上的对应的内容，比如：渲染在浏览器是 dom 元素节点，渲染在 Native( iOS、Android) 变为对应的控件、可以实现 SSR 、渲染到 WebGL 中等等</li><li>Vue3 中允许开发者基于 VNode 实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</li></ul></li><li><p>vdom如何生成？在vue中我们常常会为组件编写模板 - template， 这个模板会被编译器 - compiler编译为渲染函数，在接下来的挂载（mount）过程中会调用render函数，返回的对象就是虚拟dom。但它们还不是真正的dom，所以会在后续的patch过程中进一步转化为dom。</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80b653050433436da876459a26ab5a65~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="process"></p><ol start="4"><li>挂载过程结束后，vue程序进入更新流程。如果某些响应式数据发生变化，将会引起组件重新render，此时就会生成新的vdom，和上一次的渲染结果diff就能得到变化的地方，从而转换为最小量的dom操作，高效更新视图。</li></ol><h2 id="_10-你了解diff算法吗" tabindex="-1">10 - 你了解diff算法吗？ <a class="header-anchor" href="#_10-你了解diff算法吗" aria-hidden="true">#</a></h2><h3 id="分析-5" tabindex="-1">分析 <a class="header-anchor" href="#分析-5" aria-hidden="true">#</a></h3><p>必问题目，涉及vue更新原理，比较考查理解深度。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bffb8ffca9f0468c8a31576cebe6e692~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="diff"></p><h3 id="思路-4" tabindex="-1">思路 <a class="header-anchor" href="#思路-4" aria-hidden="true">#</a></h3><ol><li>diff算法是干什么的</li><li>它的必要性</li><li>它何时执行</li><li>具体执行方式</li><li>拔高：说一下vue3中的优化</li></ol><h3 id="回答范例-9" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-9" aria-hidden="true">#</a></h3><p>1.Vue中的diff算法称为patching算法，它由Snabbdom修改而来，虚拟DOM要想转化为真实DOM就需要通过patch方法转换。</p><p>2.最初Vue1.x视图中每个依赖均有更新函数对应，可以做到精准更新，因此并不需要虚拟DOM和patching算法支持，但是这样粒度过细导致Vue1.x无法承载较大应用；Vue 2.x中为了降低Watcher粒度，每个组件只有一个Watcher与之对应，此时就需要引入patching算法才能精确找到发生变化的地方并高效更新。</p><p>3.vue中diff执行的时刻是组件内响应式数据变更触发实例执行其更新函数时，更新函数会再次执行render函数获得最新的虚拟DOM，然后执行patch函数，并传入新旧两次虚拟DOM，通过比对两者找到变化的地方，最后将其转化为对应的DOM操作。</p><p>4.patch过程是一个递归过程，遵循深度优先、同层比较的策略；以vue3的patch为例：</p><ul><li>首先判断两个节点是否为相同同类节点，不同则删除重新创建</li><li>如果双方都是文本则更新文本内容</li><li>如果双方都是元素节点则递归更新子元素，同时更新元素属性</li><li>更新子节点时又分了几种情况： <ul><li>新的子节点是文本，老的子节点是数组则清空，并设置文本；</li><li>新的子节点是文本，老的子节点是文本则直接更新文本；</li><li>新的子节点是数组，老的子节点是文本则清空文本，并创建新子节点数组中的子元素；</li><li>新的子节点是数组，老的子节点也是数组，那么比较两组子节点，更新细节blabla</li></ul></li></ul><ol start="5"><li>vue3中引入的更新策略：编译期优化patchFlags、block等</li></ol><h2 id="_11-你知道哪些vue3新特性" tabindex="-1">11 - 你知道哪些vue3新特性 <a class="header-anchor" href="#_11-你知道哪些vue3新特性" aria-hidden="true">#</a></h2><h3 id="分析-6" tabindex="-1">分析 <a class="header-anchor" href="#分析-6" aria-hidden="true">#</a></h3><p>官网列举的最值得注意的新特性：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fv3-migration.vuejs.org%2F" title="https://v3-migration.vuejs.org/" target="_blank" rel="noreferrer">v3-migration.vuejs.org/</a></p><p>也就是下面这些：</p><ul><li>Composition API</li><li>SFC Composition API语法糖</li><li>Teleport传送门</li><li>Fragments片段</li><li>Emits选项</li><li>自定义渲染器</li><li>SFC CSS变量</li><li>Suspense</li></ul><p>以上这些是api相关，另外还有很多框架特性也不能落掉。</p><h3 id="回答范例-10" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-10" aria-hidden="true">#</a></h3><ol><li><p>api层面Vue3新特性主要包括：Composition API、SFC Composition API语法糖、Teleport传送门、Fragments 片段、Emits选项、自定义渲染器、SFC CSS变量、Suspense</p></li><li><p>另外，Vue3.0在框架层面也有很多亮眼的改进：</p></li></ol><ul><li>更快 <ul><li>虚拟DOM重写</li><li>编译器优化：静态提升、patchFlags、block等</li><li>基于Proxy的响应式系统</li></ul></li><li>更小：更好的摇树优化</li><li>更容易维护：TypeScript + 模块化</li><li>更容易扩展 <ul><li>独立的响应化模块</li><li>自定义渲染器</li></ul></li></ul><h2 id="_12-怎么定义动态路由-怎么获取传过来的动态参数" tabindex="-1">12 - 怎么定义动态路由？怎么获取传过来的动态参数？ <a class="header-anchor" href="#_12-怎么定义动态路由-怎么获取传过来的动态参数" aria-hidden="true">#</a></h2><h3 id="分析-7" tabindex="-1">分析 <a class="header-anchor" href="#分析-7" aria-hidden="true">#</a></h3><p>API题目，考查基础能力，不容有失，尽可能说的详细。</p><h3 id="思路-5" tabindex="-1">思路 <a class="header-anchor" href="#思路-5" aria-hidden="true">#</a></h3><ol><li>什么是动态路由</li><li>什么时候使用动态路由，怎么定义动态路由</li><li>参数如何获取</li><li>细节、注意事项</li></ol><h3 id="回答范例-11" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-11" aria-hidden="true">#</a></h3><ol><li>很多时候，我们需要<strong>将给定匹配模式的路由映射到同一个组件</strong>，这种情况就需要定义动态路由。</li><li>例如，我们可能有一个 <code>User</code> 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，例如：<code>{ path: &#39;/users/:id&#39;, component: User }</code>，其中<code>:id</code>就是路径参数</li><li><em>路径参数</em> 用冒号 <code>:</code> 表示。当一个路由被匹配时，它的 <em>params</em> 的值将在每个组件中以 <code>this.$route.params</code> 的形式暴露出来。</li><li>参数还可以有多个，例如<code>/users/:username/posts/:postId</code>；除了 <code>$route.params</code> 之外，<code>$route</code> 对象还公开了其他有用的信息，如 <code>$route.query</code>、<code>$route.hash</code> 等。</li></ol><h2 id="_13-如果让你从零开始写一个vue路由-说说你的思路" tabindex="-1">13-如果让你从零开始写一个vue路由，说说你的思路 <a class="header-anchor" href="#_13-如果让你从零开始写一个vue路由-说说你的思路" aria-hidden="true">#</a></h2><h3 id="思路分析-3" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析-3" aria-hidden="true">#</a></h3><p>首先思考vue路由要解决的问题：用户点击跳转链接内容切换，页面不刷新。</p><ul><li>借助hash或者history api实现url跳转页面不刷新</li><li>同时监听hashchange事件或者popstate事件处理跳转</li><li>根据hash值或者state值从routes表中匹配对应component并渲染之</li></ul><h3 id="回答范例-12" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-12" aria-hidden="true">#</a></h3><p>一个SPA应用的路由需要解决的问题是<strong>页面跳转内容改变同时不刷新</strong>，同时路由还需要以插件形式存在，所以：</p><ol><li>首先我会定义一个<code>createRouter</code>函数，返回路由器实例，实例内部做几件事： <ul><li>保存用户传入的配置项</li><li>监听hash或者popstate事件</li><li>回调里根据path匹配对应路由</li></ul></li><li>将router定义成一个Vue插件，即实现install方法，内部做两件事： <ul><li>实现两个全局组件：router-link和router-view，分别实现页面跳转和内容显示</li><li>定义两个全局变量：$route和$router，组件内可以访问当前路由和路由器实例</li></ul></li></ol><h2 id="_14-能说说key的作用吗" tabindex="-1">14-能说说key的作用吗？ <a class="header-anchor" href="#_14-能说说key的作用吗" aria-hidden="true">#</a></h2><h3 id="分析-8" tabindex="-1">分析： <a class="header-anchor" href="#分析-8" aria-hidden="true">#</a></h3><p>这是一道特别常见的问题，主要考查大家对虚拟DOM和patch细节的掌握程度，能够反映面试者理解层次。</p><h3 id="思路分析-4" tabindex="-1">思路分析： <a class="header-anchor" href="#思路分析-4" aria-hidden="true">#</a></h3><ol><li>给出结论，key的作用是用于优化patch性能</li><li>key的必要性</li><li>实际使用方式</li><li>总结：可从源码层面描述一下vue如何判断两个节点是否相同</li></ol><h3 id="回答范例-13" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-13" aria-hidden="true">#</a></h3><ol><li>key的作用主要是为了<strong>更高效的更新</strong>虚拟DOM。</li><li>vue在patch过程中<strong>判断两个节点是否是相同节点是key是一个必要条件</strong>，渲染一组列表时，key往往是唯一标识，所以如果不定义key的话，vue只能认为比较的两个节点是同一个，哪怕它们实际上不是，这导致了频繁更新元素，使得整个patch过程比较低效，影响性能。</li><li>实际使用中在渲染一组列表时key必须设置，而且必须是唯一标识，应该避免使用数组索引作为key，这可能导致一些隐蔽的bug；vue中在使用相同标签元素过渡切换时，也会使用key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。</li><li>从源码中可以知道，vue判断两个节点是否相同时主要判断两者的key和元素类型等，因此如果不设置key，它的值就是undefined，则可能永远认为这是两个相同节点，只能去做更新操作，这造成了大量的dom更新操作，明显是不可取的。</li></ol><h2 id="_15-说说nexttick的使用和原理" tabindex="-1">15-说说nextTick的使用和原理？ <a class="header-anchor" href="#_15-说说nexttick的使用和原理" aria-hidden="true">#</a></h2><h3 id="分析-9" tabindex="-1">分析 <a class="header-anchor" href="#分析-9" aria-hidden="true">#</a></h3><p>这道题及考察使用，有考察原理，nextTick在开发过程中应用的也较少，原理上和vue异步更新有密切关系，对于面试者考查很有区分度，如果能够很好回答此题，对面试效果有极大帮助。</p><h3 id="答题思路-2" tabindex="-1">答题思路 <a class="header-anchor" href="#答题思路-2" aria-hidden="true">#</a></h3><ol><li>nextTick是做什么的？</li><li>为什么需要它呢？</li><li>开发时何时使用它？抓抓头，想想你在平时开发中使用它的地方</li><li>下面介绍一下如何使用nextTick</li><li>原理解读，结合异步更新和nextTick生效方式，会显得你格外优秀</li></ol><h3 id="回答范例-14" tabindex="-1">回答范例： <a class="header-anchor" href="#回答范例-14" aria-hidden="true">#</a></h3><ol><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fstaging-cn.vuejs.org%2Fapi%2Fgeneral.html%23nexttick" title="https://staging-cn.vuejs.org/api/general.html#nexttick" target="_blank" rel="noreferrer">nextTick</a>是等待下一次 DOM 更新刷新的工具方法。</p></li><li><p>Vue有个异步更新策略，意思是如果数据变化，Vue不会立刻更新DOM，而是开启一个队列，把组件更新函数保存在队列中，在同一事件循环中发生的所有数据变更会异步的批量更新。这一策略导致我们对数据的修改不会立刻体现在DOM上，此时如果想要获取更新后的DOM状态，就需要使用nextTick。</p></li><li><p>开发时，有两个场景我们会用到nextTick：</p></li></ol><ul><li>created中想要获取DOM时；</li><li>响应式数据变化后获取DOM更新后的状态，比如希望获取列表更新后的高度。</li></ul><ol start="4"><li><p>nextTick签名如下：<code>function nextTick(callback?: () =&gt; void): Promise&lt;void&gt;</code></p><p>所以我们只需要在传入的回调函数中访问最新DOM状态即可，或者我们可以await nextTick()方法返回的Promise之后做这件事。</p></li><li><p>在Vue内部，nextTick之所以能够让我们看到DOM更新后的结果，是因为我们传入的callback会被添加到队列刷新函数(flushSchedulerQueue)的后面，这样等队列内部的更新函数都执行完毕，所有DOM操作也就结束了，callback自然能够获取到最新的DOM值。</p></li></ol><h2 id="_16-watch和computed的区别以及选择" tabindex="-1">16-watch和computed的区别以及选择? <a class="header-anchor" href="#_16-watch和computed的区别以及选择" aria-hidden="true">#</a></h2><p>两个重要API，反应应聘者熟练程度。</p><h3 id="思路分析-5" tabindex="-1">思路分析 <a class="header-anchor" href="#思路分析-5" aria-hidden="true">#</a></h3><ol><li>先看<a href="https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fapi%2Freactivity-core.html%23computed" title="https://vuejs.org/api/reactivity-core.html#computed" target="_blank" rel="noreferrer">computed</a>, <a href="https://link.juejin.cn/?target=https%3A%2F%2Fvuejs.org%2Fapi%2Freactivity-core.html%23watch" title="https://vuejs.org/api/reactivity-core.html#watch" target="_blank" rel="noreferrer">watch</a>两者定义，列举使用上的差异</li><li>列举使用场景上的差异，如何选择</li><li>使用细节、注意事项</li><li>vue3变化</li></ol><p>computed特点：具有响应式的返回值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> plusOne </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>watch特点：侦测变化，执行回调</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">prevCount</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;">/* ... */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="回答范例-15" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-15" aria-hidden="true">#</a></h3><ol><li>计算属性可以<strong>从组件数据派生出新数据</strong>，最常见的使用方式是设置一个函数，返回计算之后的结果，computed和methods的差异是它具备缓存性，如果依赖项不变时不会重新计算。侦听器<strong>可以侦测某个响应式数据的变化并执行副作用</strong>，常见用法是传递一个函数，执行副作用，watch没有返回值，但可以执行异步操作等复杂逻辑。</li><li>计算属性常用场景是<strong>简化行内模板中的复杂表达式</strong>，模板<strong>中出现太多逻辑会是模板变得臃肿不易维护</strong>。侦听器常用场景是状态变化之后<strong>做一些额外的DOM操作或者异步操作</strong>。选择采用何用方案时首先看是否需要派生出新值，基本能用计算属性实现的方式首选计算属性。</li><li>使用过程中有一些细节，比如计算属性也是可以传递对象，成为既可读又可写的计算属性。watch可以传递对象，设置deep、immediate等选项。</li><li>vue3中watch选项发生了一些变化，例如不再能侦测一个点操作符之外的字符串形式的表达式； reactivity API中新出现了watch、watchEffect可以完全替代目前的watch选项，且功能更加强大。</li></ol><h2 id="_17-说一下-vue-子组件和父组件创建和挂载顺序" tabindex="-1">17-说一下 Vue 子组件和父组件创建和挂载顺序 <a class="header-anchor" href="#_17-说一下-vue-子组件和父组件创建和挂载顺序" aria-hidden="true">#</a></h2><p>这题考查大家对创建过程的理解程度。</p><h3 id="思路分析-6" tabindex="-1">思路分析 <a class="header-anchor" href="#思路分析-6" aria-hidden="true">#</a></h3><ol><li>给结论</li><li>阐述理由</li></ol><h3 id="回答范例-16" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-16" aria-hidden="true">#</a></h3><ol><li>创建过程自上而下，挂载过程自下而上；即： <ul><li>parent created</li><li>child created</li><li>child mounted</li><li>parent mounted</li></ul></li><li>之所以会这样是因为Vue创建过程是一个递归过程，先创建父组件，有子组件就会创建子组件，因此创建时先有父组件再有子组件；子组件首次创建时会添加mounted钩子到队列，等到patch结束再执行它们，可见子组件的mounted钩子是先进入到队列中的，因此等到patch结束执行这些钩子时也先执行。</li></ol><h2 id="_18-怎么缓存当前的组件-缓存后怎么更新" tabindex="-1">18-怎么缓存当前的组件？缓存后怎么更新？ <a class="header-anchor" href="#_18-怎么缓存当前的组件-缓存后怎么更新" aria-hidden="true">#</a></h2><p>缓存组件使用keep-alive组件，这是一个非常常见且有用的优化手段，vue3中keep-alive有比较大的更新，能说的点比较多。</p><h3 id="思路-6" tabindex="-1">思路 <a class="header-anchor" href="#思路-6" aria-hidden="true">#</a></h3><ol><li>缓存用keep-alive，它的作用与用法</li><li>使用细节，例如缓存指定/排除、结合router和transition</li><li>组件缓存后更新可以利用activated或者beforeRouteEnter</li><li>原理阐述</li></ol><h3 id="回答范例-17" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-17" aria-hidden="true">#</a></h3><ol><li><p>开发中缓存组件使用keep-alive组件，keep-alive是vue内置组件，keep-alive包裹动态组件component时，会缓存不活动的组件实例，而不是销毁它们，这样在组件切换过程中将状态保留在内存中，防止重复渲染DOM。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">&lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/keep-alive&gt;</span></span>
<span class="line"></span></code></pre></div></li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">2. 结合属性include和exclude可以明确指定缓存哪些组件或排除缓存指定组件。vue3中结合vue-router时变化较大，之前是\`keep-alive\`包裹\`router-view\`，现在需要反过来用\`router-view\`包裹\`keep-alive\`：</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">   \`\`\`vue</span></span>
<span class="line"><span style="color:#A6ACCD;">   &lt;router-view v-slot=&quot;{ Component }&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &lt;keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &lt;/keep-alive&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   &lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   \`\`\`</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">3. 缓存后如果要获取数据，解决方案可以有以下两种：</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">   - beforeRouteEnter：在有vue-router的项目，每次进入路由的时候，都会执行\`beforeRouteEnter\`</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">       \`\`\`js</span></span>
<span class="line"><span style="color:#A6ACCD;">       beforeRouteEnter(to, from, next){</span></span>
<span class="line"><span style="color:#A6ACCD;">         next(vm=&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">           console.log(vm)</span></span>
<span class="line"><span style="color:#A6ACCD;">           // 每次进入路由执行</span></span>
<span class="line"><span style="color:#A6ACCD;">           vm.getData()  // 获取数据</span></span>
<span class="line"><span style="color:#A6ACCD;">         })</span></span>
<span class="line"><span style="color:#A6ACCD;">       },</span></span>
<span class="line"><span style="color:#A6ACCD;">       \`\`\`</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">   - actived：在\`keep-alive\`缓存的组件被激活的时候，都会执行\`actived\`钩子</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">       \`\`\`js</span></span>
<span class="line"><span style="color:#A6ACCD;">       activated(){</span></span>
<span class="line"><span style="color:#A6ACCD;">       	  this.getData() // 获取数据</span></span>
<span class="line"><span style="color:#A6ACCD;">       },</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="4"><li>keep-alive是一个通用组件，它内部定义了一个map，缓存创建过的组件实例，它返回的渲染函数内部会查找内嵌的component组件对应组件的vnode，如果该组件在map中存在就直接返回它。由于component的is属性是个响应式数据，因此只要它变化，keep-alive的render函数就会重新执行。</li></ol><h2 id="_19-从0到1自己构架一个vue项目-说说有哪些步骤、哪些重要插件、目录结构你会怎么组织" tabindex="-1">19-从0到1自己构架一个vue项目，说说有哪些步骤、哪些重要插件、目录结构你会怎么组织 <a class="header-anchor" href="#_19-从0到1自己构架一个vue项目-说说有哪些步骤、哪些重要插件、目录结构你会怎么组织" aria-hidden="true">#</a></h2><p>综合实践类题目，考查实战能力。没有什么绝对的正确答案，把平时工作的重点有条理的描述一下即可。</p><h3 id="思路-7" tabindex="-1">思路 <a class="header-anchor" href="#思路-7" aria-hidden="true">#</a></h3><ol><li>构建项目，创建项目基本结构</li><li>引入必要的插件：</li><li>代码规范：prettier，eslint</li><li>提交规范：husky，lint-staged</li><li>其他常用：svg-loader，vueuse，nprogress</li><li>常见目录结构</li></ol><h3 id="回答范例-18" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-18" aria-hidden="true">#</a></h3><ol><li><p>从0创建一个项目我大致会做以下事情：项目构建、引入必要插件、代码规范、提交规范、常用库和组件</p></li><li><p>目前vue3项目我会用vite或者create-vue创建项目</p></li><li><p>接下来引入必要插件：路由插件vue-router、状态管理vuex/pinia、ui库我比较喜欢element-plus和antd-vue、http工具我会选axios</p></li><li><p>其他比较常用的库有vueuse，nprogress，图标可以使用vite-svg-loader</p></li><li><p>下面是代码规范：结合prettier和eslint即可</p></li><li><p>最后是提交规范，可以使用husky，lint-staged，commitlint</p></li><li><p>目录结构我有如下习惯： <code>.vscode</code>：用来放项目中的 vscode 配置</p></li></ol><p><code>plugins</code>：用来放 vite 插件的 plugin 配置</p><p><code>public</code>：用来放一些诸如 页头icon 之类的公共文件，会被打包到dist根目录下</p><p><code>src</code>：用来放项目代码文件</p><p><code>api</code>：用来放http的一些接口配置</p><p><code>assets</code>：用来放一些 CSS 之类的静态资源</p><p><code>components</code>：用来放项目通用组件</p><p><code>layout</code>：用来放项目的布局</p><p><code>router</code>：用来放项目的路由配置</p><p><code>store</code>：用来放状态管理Pinia的配置</p><p><code>utils</code>：用来放项目中的工具方法类</p><p><code>views</code>：用来放项目的页面文件</p><h2 id="_20-实际工作中-你总结的vue最佳实践有哪些" tabindex="-1">20-实际工作中，你总结的vue最佳实践有哪些？ <a class="header-anchor" href="#_20-实际工作中-你总结的vue最佳实践有哪些" aria-hidden="true">#</a></h2><h3 id="思路-8" tabindex="-1">思路 <a class="header-anchor" href="#思路-8" aria-hidden="true">#</a></h3><p>查看vue官方文档：</p><p>风格指南：<a href="https://link.juejin.cn?target=https%3A%2F%2Fvuejs.org%2Fstyle-guide%2F" title="https://vuejs.org/style-guide/" target="_blank" rel="noreferrer">vuejs.org/style-guide…</a></p><p>性能：<a href="https://link.juejin.cn?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fbest-practices%2Fperformance.html%23overview" title="https://vuejs.org/guide/best-practices/performance.html#overview" target="_blank" rel="noreferrer">vuejs.org/guide/best-…</a></p><p>安全：<a href="https://link.juejin.cn?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fbest-practices%2Fsecurity.html" title="https://vuejs.org/guide/best-practices/security.html" target="_blank" rel="noreferrer">vuejs.org/guide/best-…</a></p><p>访问性：<a href="https://link.juejin.cn?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fbest-practices%2Faccessibility.html" title="https://vuejs.org/guide/best-practices/accessibility.html" target="_blank" rel="noreferrer">vuejs.org/guide/best-…</a></p><p>发布：<a href="https://link.juejin.cn?target=https%3A%2F%2Fvuejs.org%2Fguide%2Fbest-practices%2Fproduction-deployment.html" title="https://vuejs.org/guide/best-practices/production-deployment.html" target="_blank" rel="noreferrer">vuejs.org/guide/best-…</a></p><h3 id="回答范例-19" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-19" aria-hidden="true">#</a></h3><p>我从编码风格、性能、安全等方面说几条：</p><ol><li>编码风格方面： <ul><li>命名组件时使用“多词”风格避免和HTML元素冲突</li><li>使用“细节化”方式定义属性而不是只有一个属性名</li><li>属性名声明时使用“驼峰命名”，模板或jsx中使用“肉串命名”</li><li>使用v-for时务必加上key，且不要跟v-if写在一起</li></ul></li><li>性能方面： <ul><li>路由懒加载减少应用尺寸</li><li>利用SSR减少首屏加载时间</li><li>利用v-once渲染那些不需要更新的内容</li><li>一些长列表可以利用虚拟滚动技术避免内存过度占用</li><li>对于深层嵌套对象的大数组可以使用shallowRef或shallowReactive降低开销</li><li>避免不必要的组件抽象</li></ul></li><li>安全： <ul><li>不使用不可信模板，例如使用用户输入拼接模板：<code>template: &lt;div&gt; + userProvidedString + &lt;/div&gt;</code></li><li>小心使用v-html，:url，:style等，避免html、url、样式等注入</li></ul></li><li>等等......</li></ol><h2 id="_21-简单说一说你对vuex理解" tabindex="-1">21 - 简单说一说你对vuex理解？ <a class="header-anchor" href="#_21-简单说一说你对vuex理解" aria-hidden="true">#</a></h2><h3 id="思路-9" tabindex="-1">思路 <a class="header-anchor" href="#思路-9" aria-hidden="true">#</a></h3><ol><li>给定义</li><li>必要性阐述</li><li>何时使用</li><li>拓展：一些个人思考、实践经验等</li></ol><h3 id="范例" tabindex="-1">范例 <a class="header-anchor" href="#范例" aria-hidden="true">#</a></h3><ol><li>Vuex 是一个专为 Vue.js 应用开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储，管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>我们期待以一种简单的“单向数据流”的方式管理应用，即状态 -&gt; 视图 -&gt; 操作单向循环的方式。但当我们的应用遇到<strong>多个组件共享状态</strong>时，比如：多个视图依赖于同一状态或者来自不同视图的行为需要变更同一状态。此时单向数据流的简洁性很容易被破坏。因此，我们有必要把组件的共享状态抽取出来，以一个全局单例模式管理。通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。这是vuex存在的必要性，它和react生态中的redux之类是一个概念。</li><li>Vuex 解决状态管理的同时引入了不少概念：例如state、mutation、action等，是否需要引入还需要根据应用的实际情况衡量一下：如果不打算开发大型单页应用，使用 Vuex 反而是繁琐冗余的，一个简单的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fv3.cn.vuejs.org%2Fguide%2Fstate-management.html%23%25E4%25BB%258E%25E9%259B%25B6%25E6%2589%2593%25E9%2580%25A0%25E7%25AE%2580%25E5%258D%2595%25E7%258A%25B6%25E6%2580%2581%25E7%25AE%25A1%25E7%2590%2586" title="https://v3.cn.vuejs.org/guide/state-management.html#%E4%BB%8E%E9%9B%B6%E6%89%93%E9%80%A0%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86" target="_blank" rel="noreferrer">store 模式</a>就足够了。但是，如果要构建一个中大型单页应用，Vuex 基本是标配。</li><li>我在使用vuex过程中感受到一些blabla</li></ol><h2 id="_22-说说从-template-到-render-处理过程" tabindex="-1">22-说说从 Template 到 Render 处理过程 <a class="header-anchor" href="#_22-说说从-template-到-render-处理过程" aria-hidden="true">#</a></h2><h3 id="分析-10" tabindex="-1">分析 <a class="header-anchor" href="#分析-10" aria-hidden="true">#</a></h3><p>问我们template到render过程，其实是问vue<code>编译器</code>工作原理。</p><h3 id="思路-10" tabindex="-1">思路 <a class="header-anchor" href="#思路-10" aria-hidden="true">#</a></h3><ol><li>引入vue编译器概念</li><li>说明编译器的必要性</li><li>阐述编译器工作流程</li></ol><h3 id="回答范例-20" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-20" aria-hidden="true">#</a></h3><ol><li>Vue中有个独特的编译器模块，称为“compiler”，它的主要作用是将用户编写的template编译为js中可执行的render函数。</li><li>之所以需要这个编译过程是为了便于前端程序员能高效的编写视图模板。相比而言，我们还是更愿意用HTML来编写视图，直观且高效。手写render函数不仅效率底下，而且失去了编译期的优化能力。</li><li>在Vue中编译器会先对template进行解析，这一步称为parse，结束之后会得到一个JS对象，我们称为抽象语法树AST，然后是对AST进行深加工的转换过程，这一步成为transform，最后将前面得到的AST生成为JS代码，也就是render函数。</li></ol><h3 id="可能的追问-2" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问-2" aria-hidden="true">#</a></h3><ol><li>Vue中编译器何时执行？</li><li>react有没有编译器？</li></ol><h2 id="_23-vue实例挂载的过程中发生了什么" tabindex="-1">23-Vue实例挂载的过程中发生了什么? <a class="header-anchor" href="#_23-vue实例挂载的过程中发生了什么" aria-hidden="true">#</a></h2><h3 id="分析-11" tabindex="-1">分析 <a class="header-anchor" href="#分析-11" aria-hidden="true">#</a></h3><p>挂载过程完成了最重要的两件事：</p><ol><li>初始化</li><li>建立更新机制</li></ol><p>把这两件事说清楚即可！</p><h3 id="回答范例-21" tabindex="-1">回答范例 <a class="header-anchor" href="#回答范例-21" aria-hidden="true">#</a></h3><ol><li>挂载过程指的是app.mount()过程，这个过程中整体上做了两件事：<strong>初始化</strong>和<strong>建立更新机制</strong></li><li>初始化会创建组件实例、初始化组件状态，创建各种响应式数据</li><li>建立更新机制这一步会立即执行一次组件更新函数，这会首次执行组件渲染函数并执行patch将前面获得vnode转换为dom；同时首次执行渲染函数会创建它内部响应式数据之间和组件更新函数之间的依赖关系，这使得以后数据变化时会执行对应的更新函数。</li></ol><h3 id="可能的追问-3" tabindex="-1">可能的追问 <a class="header-anchor" href="#可能的追问-3" aria-hidden="true">#</a></h3><ol><li>响应式数据怎么创建</li><li>依赖关系如何建立</li></ol>`,233),t=[i];function o(r,p,c,d,h,u){return a(),l("div",null,t)}const y=e(n,[["render",o]]);export{g as __pageData,y as default};
