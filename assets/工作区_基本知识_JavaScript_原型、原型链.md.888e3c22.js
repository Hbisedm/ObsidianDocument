import{_ as e,c as o,o as t,a}from"./app.e5db1f59.js";const b=JSON.parse('{"title":"原型与原型链","description":"","frontmatter":{"title":"原型与原型链","date":"2022-05-30T12:42:26.000Z","tags":["JavaScript"],"excerpt":"原型与原型链的概念与区别"},"headers":[{"level":2,"title":"__proto__和prototype关系：","slug":"proto-和prototype关系","link":"#proto-和prototype关系","children":[]},{"level":2,"title":"原型","slug":"原型","link":"#原型","children":[]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":2,"title":"原型、构造函数、实例","slug":"原型、构造函数、实例","link":"#原型、构造函数、实例","children":[{"level":3,"title":"举个例子","slug":"举个例子","link":"#举个例子","children":[]}]},{"level":2,"title":"三者关系 =>","slug":"三者关系","link":"#三者关系","children":[]},{"level":2,"title":"原型链","slug":"原型链-1","link":"#原型链-1","children":[]}],"relativePath":"工作区/基本知识/JavaScript/原型、原型链.md"}'),s={name:"工作区/基本知识/JavaScript/原型、原型链.md"},l=a(`<p>#原型链</p><h1 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-hidden="true">#</a></h1><p>除了基本对象（base Object），所有对象都有原型</p><h2 id="proto-和prototype关系" tabindex="-1"><code>__proto__</code>和prototype关系： <a class="header-anchor" href="#proto-和prototype关系" aria-hidden="true">#</a></h2><ul><li><code>__proto__</code>和constructor是对象独有的。</li><li>prototype属性是函数独有的</li></ul><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-hidden="true">#</a></h2><blockquote><p>在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对象（也就是它的原型），这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部将包含一个指针（<code>__proto__</code>），这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们是不应该能够获取到这个值的，但是现在浏览器中都实现了<code>__proto__</code> 属性来让我们访问这个属性，但是我们最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对象的原型。</p></blockquote><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-hidden="true">#</a></h2><p>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是我们新建的对象为什么能够使用 toString() 等方法的原因。</p><blockquote><p>特点：JavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与 之相关的对象也会继承这一改变</p></blockquote><h2 id="原型、构造函数、实例" tabindex="-1">原型、构造函数、实例 <a class="header-anchor" href="#原型、构造函数、实例" aria-hidden="true">#</a></h2><ul><li>原型(prototype): 一个简单的对象，用于实现对象的 属性继承。可以简单的理解成对象的爹。在 Firefox 和 Chrome 中，每个JavaScript对象中都包含一个<code>__proto__</code>(非标准)的属性指向它爹(该对象的原型)，可obj.<code>__proto__</code>进行访问。</li><li>构造函数: 可以通过new来 新建一个对象 的函数。</li><li>实例: 通过构造函数和new创建出来的对象，便是实例。 实例通过<code>__proto__</code>指向原型，通过constructor指向构造函数。</li></ul><h3 id="举个例子" tabindex="-1">举个例子 <a class="header-anchor" href="#举个例子" aria-hidden="true">#</a></h3><p>以Object为例，我们常用的Object便是一个构造函数，因此我们可以通过它构建实例。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// 实例</span></span>
<span class="line"><span style="color:#A6ACCD;">const instance = new Object() </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>则此时， 实例为instance, 构造函数为Object，我们知道，构造函数拥有一个prototype的属性指向原型，因此原型为:</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// 原型</span></span>
<span class="line"><span style="color:#A6ACCD;">const prototype = Object.prototype </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="三者关系" tabindex="-1">三者关系 =&gt; <a class="header-anchor" href="#三者关系" aria-hidden="true">#</a></h2><p>这里我们可以来看出三者的关系:</p><ul><li>实例.<code>__proto__</code> === 原型</li><li>原型.constructor === 构造函数</li><li>构造函数.prototype === 原型</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// 这条线其实是是基于原型进行获取的，可以理解成一条基于原型的映射线</span></span>
<span class="line"><span style="color:#A6ACCD;">// 例如: </span></span>
<span class="line"><span style="color:#A6ACCD;">// const o = new Object()</span></span>
<span class="line"><span style="color:#A6ACCD;">// o.constructor === Object   --&gt; true</span></span>
<span class="line"><span style="color:#A6ACCD;">// o.__proto__ = null;</span></span>
<span class="line"><span style="color:#A6ACCD;">// o.constructor === Object   --&gt; false</span></span>
<span class="line"><span style="color:#A6ACCD;">实例.constructor === 构造函数 </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301622964.png" alt="49a2411d33c4ff8d57c520010a1a2e82.png"></p><h2 id="原型链-1" tabindex="-1">原型链 <a class="header-anchor" href="#原型链-1" aria-hidden="true">#</a></h2><blockquote><p>原型链是由原型对象组成，每个对象都有<code>__proto__</code>属性，指向了创建该对象的构造函数的原型，<code>__proto__</code> 将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链</p></blockquote><ul><li>属性查找机制: 当查找对象的属性时，如果实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象Object.prototype，如还是没找到，则输出undefined；</li><li>属性修改机制: 只会修改实例对象本身的属性，如果不存在，则进行添加该属性，如果需要修改原型的属性时，则可以用: b.prototype.x = 2；但是这样会造成所有继承于该对象的实例的属性发生改变。</li></ul><p>js 获取原型的方法</p><ul><li>p.<code>__proto__</code></li><li>p.constructor.prototype</li><li>Object.getPrototypeOf§</li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301622970.png" alt="76bb94e3e609fdb92550ef36b62c5aab.png"></p><ul><li>每个函数都有 prototype 属性，除了 Function.prototype.bind()，该属性指向原型。</li><li>每个对象都有 <code>__proto__</code> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 [[prototype]]，但是 [[prototype]]是内部属性，我们并不能访问到，所以使用 <code>_proto_</code>来访问</li><li>对象可以通过 <code>__proto__</code> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了原型链。</li></ul>`,29),p=[l];function n(c,r,i,d,_,h){return t(),o("div",null,p)}const y=e(s,[["render",n]]);export{b as __pageData,y as default};
