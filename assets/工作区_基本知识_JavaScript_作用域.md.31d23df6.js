import{_ as s,c as a,o as n,a as l}from"./app.e5db1f59.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"作用域可以理解为变量的可访问性，总共分为三种类型，分别为：","slug":"作用域可以理解为变量的可访问性-总共分为三种类型-分别为","link":"#作用域可以理解为变量的可访问性-总共分为三种类型-分别为","children":[]},{"level":3,"title":"作用域链的概念","slug":"作用域链的概念","link":"#作用域链的概念","children":[]},{"level":3,"title":"1.全局作用域","slug":"_1-全局作用域","link":"#_1-全局作用域","children":[]},{"level":3,"title":"2. 函数作用域","slug":"_2-函数作用域","link":"#_2-函数作用域","children":[]},{"level":3,"title":"3. 块级作用域","slug":"_3-块级作用域","link":"#_3-块级作用域","children":[]}],"relativePath":"工作区/基本知识/JavaScript/作用域.md"}'),e={name:"工作区/基本知识/JavaScript/作用域.md"},o=l(`<ul><li>作用域： 作用域是定义变量的区域，它有一套访问变量的规则，这套规则来管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找</li><li>作用域链： 作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和 函数。</li></ul><blockquote><p>作用域链的本质上是一个指向<strong>变量对象</strong>的指针列表。<strong>变量对象</strong>是一个包含了执行环境中所有变量和函数的<strong>对象</strong>。作用域链的前 端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p></blockquote><ul><li>当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找</li><li>作用域链的创建过程跟执行上下文的建立有关…</li></ul><h3 id="作用域可以理解为变量的可访问性-总共分为三种类型-分别为" tabindex="-1">作用域可以理解为变量的可访问性，总共分为三种类型，分别为： <a class="header-anchor" href="#作用域可以理解为变量的可访问性-总共分为三种类型-分别为" aria-hidden="true">#</a></h3><ul><li>全局作用域</li><li>函数作用域</li><li>块级作用域，ES6 中的 let、const 就可以产生该作用域</li></ul><h3 id="作用域链的概念" tabindex="-1">作用域链的概念 <a class="header-anchor" href="#作用域链的概念" aria-hidden="true">#</a></h3><blockquote><p>一旦我们将这些作用域嵌套起来，就变成了另外一个重要的知识点「作用域链」，也就是 JS 到底是如何访问需要的变量或者函数的。</p></blockquote><ul><li>首先作用域链是在定义时就被确定下来的，和箭头函数里的 this 一样，后续不会改变，JS 会一层层往上寻找需要的内容。</li><li>其实作用域链这个东西我们在闭包小结中已经看到过它的实体了：<code>[[Scopes]]</code><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202206100848520.png" alt=""></li></ul><blockquote><p>[[Scopes]] 是个数组，作用域的一层层往上寻找就等同于遍历 [[Scopes]]。</p></blockquote><h3 id="_1-全局作用域" tabindex="-1">1.全局作用域 <a class="header-anchor" href="#_1-全局作用域" aria-hidden="true">#</a></h3><blockquote><p>全局变量是挂载在 window 对象下的变量，所以在网页中的任何位置你都可以使用并且访问到这个全局变量</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">var globalName = &#39;global&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">function getName() { </span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(globalName) // global</span></span>
<span class="line"><span style="color:#A6ACCD;">  var name = &#39;inner&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(name) // inner</span></span>
<span class="line"><span style="color:#A6ACCD;">} </span></span>
<span class="line"><span style="color:#A6ACCD;">getName();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(name); // </span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(globalName); //global</span></span>
<span class="line"><span style="color:#A6ACCD;">function setName(){ </span></span>
<span class="line"><span style="color:#A6ACCD;">  vName = &#39;setName&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">setName();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(vName); // setName </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>从这段代码中我们可以看到，globalName 这个变量无论在什么地方都是可以被访问到的，所以它就是全局变量。而在 getName 函数中作为局部变量的 name 变量是不具备这种能力的</li><li>当然全局作用域有相应的缺点，我们定义很多全局变量的时候，会容易引起变量命名的冲突，所以在定义变量的时候应该注意作用域的问题。</li></ul><h3 id="_2-函数作用域" tabindex="-1">2. 函数作用域 <a class="header-anchor" href="#_2-函数作用域" aria-hidden="true">#</a></h3><blockquote><p>函数中定义的变量叫作函数变量，这个时候只能在函数内部才能访问到它，所以它的作用域也就是函数的内部，称为函数作用域</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">function getName () {</span></span>
<span class="line"><span style="color:#A6ACCD;">  var name = &#39;inner&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(name); //inner</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">getName();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(name); </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>除了这个函数内部，其他地方都是不能访问到它的。同时，当这个函数被执行完之后，这个局部变量也相应会被销毁。所以你会看到在 getName 函数外面的 name 是访问不到的 <strong>(闭包除外)</strong></li></ul><h3 id="_3-块级作用域" tabindex="-1">3. 块级作用域 <a class="header-anchor" href="#_3-块级作用域" aria-hidden="true">#</a></h3><blockquote><p>ES6 中新增了块级作用域，最直接的表现就是新增的 let 关键词，使用 let 关键词定义的变量只能在块级作用域中被访问，有“<strong>暂时性死区</strong>”的特点，也就是说这个变量在定义之前是不能被使用的。 在 JS 编码过程中 if 语句及 for 语句后面 {…} 这里面所包括的，就是块级作用域</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">console.log(a) //a is not defined</span></span>
<span class="line"><span style="color:#A6ACCD;">if(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">  let a = &#39;123&#39;；</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(a)； // 123</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(a) //a is not defined </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>从这段代码可以看出，变量 a 是在 if 语句{…} 中由 let 关键词进行定义的变量，所以它的作用域是 if 语句括号中的那部分，而在外面进行访问 a 变量是会报错的，<strong>因为这里不是它的作用域</strong>。所以在 if 代码块的前后输出 a 这个变量的结果，控制台会显示 a 并没有定义</p></blockquote>`,21),p=[o];function t(c,i,r,C,d,A){return n(),a("div",null,p)}const h=s(e,[["render",t]]);export{g as __pageData,h as default};
