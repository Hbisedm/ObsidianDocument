import{_ as s,c as n,o as a,a as p}from"./app.6426b36b.js";const A=JSON.parse('{"title":"移动端适配的笔记","description":"","frontmatter":{"title":"移动端适配的笔记","tags":["移动端适配"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期六, 十二月 24日 2022, 2:52:38 下午"},"headers":[{"level":2,"title":"Rem","slug":"rem","link":"#rem","children":[]},{"level":2,"title":"Viewport","slug":"viewport","link":"#viewport","children":[]}],"relativePath":"工作区/开发问题/移动端适配.md"}'),l={name:"工作区/开发问题/移动端适配.md"},o=p(`<p>#适配 #h5</p><h1 id="移动端适配的笔记" tabindex="-1">移动端适配的笔记 <a class="header-anchor" href="#移动端适配的笔记" aria-hidden="true">#</a></h1><h2 id="rem" tabindex="-1">Rem <a class="header-anchor" href="#rem" aria-hidden="true">#</a></h2><blockquote><p>rem 与 em区别</p></blockquote><p>1em的大小根据父元素的字体大小 1rem的大小根据html标签的字体大小</p><p>不同移动端设备的宽度不同，需要拿到不同移动端的屏幕宽度、是不是高清屏这些属性进行计算后得到每个屏幕对应的rem</p><p>使用<a href="https://github.com/imochen/hotcss" target="_blank" rel="noreferrer">hotcss</a>生成当前页面根标签<code>&lt;html&gt;</code>的字体大小 也就是 <code>rem</code> 基准值</p><p>现在rem已经解决了。但是平时对着UI稿写页面的时候</p><p>UI稿的px -&gt; rem -&gt; 转化后px</p><p>需要个转化插件 ： postcss</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">postcss</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">postcss-pxtorem</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// 把px单位换算成rem单位</span></span>
<span class="line"><span style="color:#F07178;">          rootValue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">37.5</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;">//换算基数， </span></span>
<span class="line"><span style="color:#F07178;">          unitPrecision</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;">//允许REM单位增长到的十进制数字,小数点后保留的位数。</span></span>
<span class="line"><span style="color:#F07178;">          propList</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          exclude</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">node_module</span><span style="color:#89DDFF;">)/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#676E95;">//默认false，可以（reg）利用正则表达式排除某些文件夹的方法，例如/(node_module)/ 。如果想把前端UI框架内的px也转换成rem，请把此属性设为默认值</span></span>
<span class="line"><span style="color:#F07178;">          selectorBlackList</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.van</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;">//要忽略并保留为px的选择器，本项目我是用的vant ui框架，所以忽略他</span></span>
<span class="line"><span style="color:#F07178;">          mediaQuery</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#676E95;">//（布尔值）允许在媒体查询中转换px。</span></span>
<span class="line"><span style="color:#F07178;">          minPixelValue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#676E95;">//设置要替换的最小像素值</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202207211936623.png" alt=""> rem本意只是相对html根字体大小的单位,后来被作为响应式布局的一种方案,所以rem布局需要引入js文件监听屏幕宽度变化从而改变html字体大小. <strong>但是浏览器字体大小有个最小值一般是12px</strong>,所以当屏幕缩小到一定宽度时,容器的宽高就不再等比缩放了</p><h2 id="viewport" tabindex="-1">Viewport <a class="header-anchor" href="#viewport" aria-hidden="true">#</a></h2><p>vw布局则不需要引入额外js文件,可能存在兼容性问题不过现在已经不需要考虑这个兼容性了</p><p>安装</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install postcss-px-to-viewport -D</span></span>
<span class="line"></span></code></pre></div><p>使用</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">module.exports = </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      autoprefixer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">postcss-px-to-viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        unitToConvert</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">px</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 默认值\`px\`，需要转换的单位</span></span>
<span class="line"><span style="color:#A6ACCD;">        viewportWidth</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">375</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">//视窗的宽度，对应的是我们设计稿的宽度</span></span>
<span class="line"><span style="color:#A6ACCD;">        unitPrecision</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">//指定\`px\`转换为视窗单位值的小数位数，默认是5(很多时候无法整除)</span></span>
<span class="line"><span style="color:#A6ACCD;">        viewportUnit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;vw&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">//指定需要转换成的视窗单位，建议使用vw</span></span>
<span class="line"><span style="color:#A6ACCD;">        fontViewportUnit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;vw&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//指定字体需要转换成的视窗单位，默认vw;</span></span>
<span class="line"><span style="color:#A6ACCD;">        selectorBlackList</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">&#39;.ignore&#39;</span><span style="color:#89DDFF;">],</span><span style="color:#676E95;">//指定不转换为视窗单位的类 </span></span>
<span class="line"><span style="color:#A6ACCD;">        minPixelValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">// 小于或等于\`1px\`不转换为视窗单位</span></span>
<span class="line"><span style="color:#A6ACCD;">        mediaQuery</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#676E95;">// 允许在媒体查询中转换\`px\`，默认false</span></span>
<span class="line"><span style="color:#A6ACCD;">        exclude</span><span style="color:#89DDFF;">:[</span><span style="color:#A6ACCD;">/node_modules/</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//如果是regexp, 忽略全部匹配文件;如果是数组array, 忽略指定文件.</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,18),e=[o];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
