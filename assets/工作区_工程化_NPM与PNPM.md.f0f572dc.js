import{_ as s,c as n,o as a,a as o}from"./app.c99ff793.js";const d=JSON.parse('{"title":"NPM与PNPM的笔记","description":"","frontmatter":{"title":"NPM与PNPM的笔记","tags":["NPM与PNPM"],"创建时间":"星期六, 八月 13日 2022, 9:18:29 晚上","修改时间":"星期日, 八月 14日 2022, 12:05:48 凌晨"},"headers":[{"level":2,"title":"package.json","slug":"package-json","link":"#package-json","children":[{"level":3,"title":"语义化版本","slug":"语义化版本","link":"#语义化版本","children":[]}]},{"level":2,"title":"开发到发布","slug":"开发到发布","link":"#开发到发布","children":[{"level":3,"title":"调试/修改包","slug":"调试-修改包","link":"#调试-修改包","children":[]},{"level":3,"title":"安装本地的包","slug":"安装本地的包","link":"#安装本地的包","children":[]}]},{"level":2,"title":"npm常用的命令如何工作的","slug":"npm常用的命令如何工作的","link":"#npm常用的命令如何工作的","children":[{"level":3,"title":"Npm Run","slug":"npm-run","link":"#npm-run","children":[]},{"level":3,"title":"Npm Install","slug":"npm-install","link":"#npm-install","children":[]},{"level":3,"title":"npm ci","slug":"npm-ci","link":"#npm-ci","children":[]}]},{"level":2,"title":"npm有哪些问题","slug":"npm有哪些问题","link":"#npm有哪些问题","children":[{"level":3,"title":"依赖结构不确定","slug":"依赖结构不确定","link":"#依赖结构不确定","children":[]}]},{"level":2,"title":"Pnpm","slug":"pnpm","link":"#pnpm","children":[{"level":3,"title":"如何做到项目隔离？","slug":"如何做到项目隔离","link":"#如何做到项目隔离","children":[]}]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"工作区/工程化/NPM与PNPM.md"}'),p={name:"工作区/工程化/NPM与PNPM.md"},l=o(`<p>#pnpm #npm #工程化</p><h1 id="npm与pnpm的笔记" tabindex="-1">NPM与PNPM的笔记 <a class="header-anchor" href="#npm与pnpm的笔记" aria-hidden="true">#</a></h1><h2 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-hidden="true">#</a></h2><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#676E95;">// 是否私有</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my_package</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">// 包名/项目名</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">react-cli</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./bin/index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this is test project</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">// 描述</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">// 版本</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">// 脚本</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">echo </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">Error: no test specified</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;"> &amp;&amp; exit 1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">repository</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">// 仓库地址</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">git</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/monatheoctocat/my_package.git</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">keywords</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">project</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">didi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span><span style="color:#676E95;">// 搜索关键字</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">// 作者npm用户</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">license</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ISC</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">// 开源协议</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bugs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">// 项目问题跟踪器的 url 和/或应报告问题的电子邮件地址</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/owner/project/issues</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">email</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">project@hostname.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">homepage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/monatheoctocat/my_package</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;">// 主页</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">// 生产依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">my_dep</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">another_dep</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">~2.2.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;">// 开发依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">my_test_framework</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^3.1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">another_dev_dep</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0 - 1.2.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>上面的这些内容只是 package.json 的凤毛麟角，例如还有还有 engines(该package运行对node\\npm的版本要求)、os（该package运行对操作系统的要求）、cpu（处理器要求）...</p><p>详见：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.npmjs.com%2Fcli%2Fv8%2Fconfiguring-npm%2Fpackage-json" title="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">docs.npmjs.com/</a></p><h3 id="语义化版本" tabindex="-1">语义化版本 <a class="header-anchor" href="#语义化版本" aria-hidden="true">#</a></h3><p>说到 package.json 就不得不说到他的 语义化版本 管理。npm 对版本的描述可以是一个指定的版本（例如1.1.0），也可以是一个范围（例如&gt;1.1.0）。</p><table><thead><tr><th><strong>语义化版本表示方式</strong></th><th><strong>语义</strong></th></tr></thead><tbody><tr><td>^1.2.3</td><td>1.x.x(第一位非0数字后取最新子版本)</td></tr><tr><td>~1.2.3</td><td>1.2.x</td></tr><tr><td>1.2.3</td><td>1.2.3</td></tr><tr><td>1.x.x</td><td>1.x.x</td></tr><tr><td>&gt;1.0.0，&gt;=1.0.0，&lt;2.0.0，&lt;=2.0.0,&gt;= 3.0.0</td><td>&lt;2.0.0</td></tr><tr><td>*</td><td>x.x.x</td></tr><tr><td>…</td><td></td></tr></tbody></table><blockquote><p>值得一提的是，^a.b.c 并不是指大版本 a 固定，其他子版本取最新的意思，而是指第一位非0数字右边的版本取最新的意思，也就是说，^0.1.1 其实是指 0.1.x（&gt;= 0.1.1 &amp;&amp; &lt; 0.1.2） 而不是 0.x.x。</p></blockquote><h2 id="开发到发布" tabindex="-1">开发到发布 <a class="header-anchor" href="#开发到发布" aria-hidden="true">#</a></h2><p>[[npm发布]]</p><ol><li>首先需要到 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fsignup" title="https://www.npmjs.com/signup" target="_blank" rel="noreferrer">npm 官网</a> 注册一个 npm 账号</li><li>在本地通过运行 <code>npm login</code> 登陆你的 npm 账号</li><li>初始化你的项目</li></ol><ul><li><code>npm init -y</code> 可以在当前目录下快速初始化一个 package.json 文件</li><li>初始化一个 <a href="http://README.md" target="_blank" rel="noreferrer">README.md</a> 文件</li></ul><ol start="4"><li>编写代码/修改代码</li><li>使用 <code>npm publish</code> 发布当前包到 npm 仓库</li></ol><p><strong>发布属于某个scope或者组织下的包需要满足的条件：</strong></p><ol><li>需要 name 用 <strong>@组织名</strong> 开头，例如 @vue/cli</li><li>你的 npm 账户需要属于这个组织或者命名空间</li><li>如果发布的包属于某一个 scope 或者组织，如果是非 npm 官方镜像（一般就是指私有 npm 仓库），那么你还需要配置 <code>publishConfig.registry</code> 来指定镜像地址。</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">publishConfig</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">私有镜像地址</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ol start="4"><li>运行 <code>npm publish --access public</code> 发布 npm 包</li></ol><h3 id="调试-修改包" tabindex="-1">调试/修改包 <a class="header-anchor" href="#调试-修改包" aria-hidden="true">#</a></h3><p>A 为提供包的项目， B为引用包的项目</p><ol><li>A中 <code>npm link</code></li><li>B 中 <code>npm link 包名</code> 这样A中项目修改会实时给到B</li></ol><h3 id="安装本地的包" tabindex="-1">安装本地的包 <a class="header-anchor" href="#安装本地的包" aria-hidden="true">#</a></h3><p>上面说到 npm link 可以创建链接直接链接到本地对应包的代码目录，但是当我们运行 npm i 或者 node_modules 丢失之类的情况时，再次安装就会出现去 npm 官网下载包代码而不是创建链接，原因是 npm link 并不会在 package.json 存在记录。但是有的时候我们想开发一个私有包，不想发布到 npm 上，又要运行 npm install 能正常安装这个包，那么我们可以用下面这种方式</p><p><code> npm install 待安装包的相对路径</code></p><p>A的<code>package.json</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo-a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">keywords</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">license</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ISC</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>index.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello NPM from demo-a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>B的<code>package.json</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo-b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&gt; 引用包</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">keywords</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">license</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ISC</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">demo-a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">file:../demo-a</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="npm常用的命令如何工作的" tabindex="-1">npm常用的命令如何工作的 <a class="header-anchor" href="#npm常用的命令如何工作的" aria-hidden="true">#</a></h2><h3 id="npm-run" tabindex="-1">Npm Run <a class="header-anchor" href="#npm-run" aria-hidden="true">#</a></h3><p>当我们运行 <code>npm run hello</code> 会查找 package.json 中 scripts 中 key 为 serve 对应的值来当作命令执行，也就是相当于执行了 <code>hello</code></p><p>当运行 <code>npm run hello</code> 时其实就相当于运行了 <code>hello</code></p><p>那为什么我们要执行 <code>npm run hello</code> 而不直接执行 <code>hello</code> 呢？</p><blockquote><p>hello</p><p>zsh: command not found: hello</p></blockquote><p>为什么我们直接执行 <code>hello</code> 找不到命令，使用 npm run 来执行却可以？原因是 npm run 执行脚本时会先去 <code>node_modules/.bin</code> 中查找是否存在要运行的命令，<strong>如果不存在则查找 <code>../node_modules/.bin</code>，如果全都找不到才会去按系统的环境变量查找。</strong></p><p>好在现在 node 给我们提供了 npx 命令来解决这个问题。运行 <code>npx hello</code> 即可运行 hello 命令。当然你也可以直接运行 <code>node_modules/.bin/hello</code></p><blockquote><p>npx 可以让命令的查找路径与 npm run 一致</p></blockquote><p>那么 node_modules/.bin 中的文件从哪来的呢？</p><p><code>npm i </code> 时会将 <code>demo-a</code> 中的 package.json 中的 bin 指定的命令和文件链接到 <code>node_modules/.bin</code>，也就是说 <code>node_modules/.bin/hello</code> 其实是 <code>node_modules/demo-a/bin/index.js</code> 的快捷方式</p><p>当运行 <code>npx hello</code> 时自然就相当于运行了 <code>demo-a/bin/index.js</code></p><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h4><ul><li>当我们使用 npm install 安装包时，会将这个包中 package.json 中 bin 中指定的脚本软链接到项目的 node_modules/.bin 下，key 作为链接名字（也就是命令），value 作为命令运行时执行的文件</li><li>当我们通过npm run xxx 运行某个脚本时，会执行 package.json 中 scripts 中指定的脚步后的命令，会先去 node_modules/.bin 中查找这些命令，然后去 ../node_modules/.bin,...全都找不到才会去环境变量中查找。</li></ul><h3 id="npm-install" tabindex="-1">Npm Install <a class="header-anchor" href="#npm-install" aria-hidden="true">#</a></h3><h4 id="执行工程自身-preinstall-钩子" tabindex="-1"><strong>执行工程自身 Preinstall 钩子</strong> <a class="header-anchor" href="#执行工程自身-preinstall-钩子" aria-hidden="true">#</a></h4><p>npm 跟 git 一样都有完善的钩子机制散布在 npm 运行的各个阶段，当前 npm 工程如果定义了 preinstall 钩子此时会在执行 npm install 命令之前被执行</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">preinstall</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">echo </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">preinstall....</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">postinstall</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">echo </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">postinstall ..</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="获取-package-json-中依赖数据构建依赖树" tabindex="-1"><strong>获取 package.json 中依赖数据构建依赖树</strong> <a class="header-anchor" href="#获取-package-json-中依赖数据构建依赖树" aria-hidden="true">#</a></h4><p>首先需要做的是确定工程中的首层依赖，也就是 dependencies 和 devDependencies 属性中直接指定的模块（假设此时没有添加 npm install的其他参数）。</p><blockquote><p>工程本身是整棵依赖树的根节点，每个首层依赖模块都是根节点下面的一棵子树，npm 会开启多进程从每个首层依赖模块开始逐步寻找更深层级的节点。</p></blockquote><p>确定完首层依赖后，就开始获取各个依赖的模块信息，获取模块信息是一个递归的过程，分为以下几步：</p><ol><li>获取<strong>模块信息</strong>。在下载一个模块之前，首先要确定其版本，这是因为 package.json 中往往是 semantic version（semver，语义化版本）。此时如果版本描述文件（npm-shrinkwrap.json 或 package-lock.json）中有该模块信息直接拿即可，如果没有则从仓库获取。如 packaeg.json 中某个包的版本是 ^1.1.0，npm 就会去仓库中获取符合 1.x.x 形式的最新版本。</li><li>获取<strong>模块实体</strong>。上一步会获取到模块的压缩包地址（resolved 字段），npm 会用此地址检查本地缓存，缓存中有就直接拿，如果没有则从仓库下载。</li><li>查找该模块依赖，如果有依赖则回到第1步，如果没有则停止。</li></ol><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132321363.png" alt=""></p><blockquote><p>如果项目中存在 npm 的 lock 文件（例如package-lock.json），则不会从头开始构建依赖树，而是对 lock 中依赖树中存储冲突的依赖进行调整即可</p></blockquote><h4 id="依赖树扁平化-dedupe" tabindex="-1"><strong>依赖树扁平化（dedupe）</strong> <a class="header-anchor" href="#依赖树扁平化-dedupe" aria-hidden="true">#</a></h4><p>上一步获取到的是一棵完整的依赖树，其中可能包含大量重复模块。比如 foo 模块依赖于 loadsh，bar 模块同样依赖于 lodash。在 npm3 以前会严格按照依赖树的结构进行安装，也就是方便在 foo 和 bar 的 node_modules 中各安装一份，因此会造成模块冗余。</p><p>从 npm3 开始默认加入了一个 dedupe 的过程。它会遍历所有节点，逐个将模块放在根节点下面，也就是 node_modules 的第一层。当发现有<strong>重复模块</strong>时，则将其丢弃。</p><p>经过优化后的依赖树就是变成了下面这样</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132325238.png" alt=""></p><blockquote><p>而 lock 文件中存储的正是这颗被优化后的依赖树。</p></blockquote><p>这里需要对<strong>重复模块</strong>进行一个定义，它指的是<strong>模块名相同</strong>且 <strong>semver(语义化版本) 兼容。每个 semver 都对应一段版本允许范围，如果两个模块的版本允许范围存在交集，那么就可以得到一个</strong>兼容版本，而不必版本号完全一致，这可以使更多冗余模块在 dedupe 过程中被去掉。</p><p>比如 node_modules 下 foo 模块依赖 lodash@^1.0.0，bar 模块依赖 lodash@^1.1.0，则 <strong>&gt;=1.1.0</strong> 的版本都为兼容版本。</p><p>而当 foo 依赖 lodash@^2.0.0，bar 依赖 lodash@^1.1.0，则依据 semver 的规则，二者不存在兼容版本。会将一个版本放在首层依赖中，另一个仍保留在其父项（foo或者bar）的依赖树里。</p><p>举个栗子🌰，假设一个依赖树原本是这样：</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#676E95;">--foo</span></span>
<span class="line"><span style="color:#A6ACCD;">   |</span><span style="color:#676E95;">-- lodash@version1</span></span>
<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#676E95;">--bar</span></span>
<span class="line"><span style="color:#A6ACCD;">   |</span><span style="color:#676E95;">-- lodash@version2</span></span>
<span class="line"></span></code></pre></div><p>假设 version1 和 version2 是兼容版本，则经过 dedupe 会成为下面的形式：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">--foo</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">--bar</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">--lodash（保留的版本为兼容版本）</span></span>
<span class="line"></span></code></pre></div><p>假设 version1 和 version2 为非兼容版本，则后面的版本保留在依赖树中：</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#676E95;">--foo</span></span>
<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#676E95;">--lodash@version1</span></span>
<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#676E95;">--bar</span></span>
<span class="line"><span style="color:#A6ACCD;">   |</span><span style="color:#676E95;">-- lodash@version2</span></span>
<span class="line"></span></code></pre></div><h4 id="安装模块" tabindex="-1">安装模块 <a class="header-anchor" href="#安装模块" aria-hidden="true">#</a></h4><p>这一步将会按照依赖树下载/解压包，并更新工程中的 node_modules</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132327917.png" alt=""></p><h3 id="npm-ci" tabindex="-1"><strong>npm ci</strong> <a class="header-anchor" href="#npm-ci" aria-hidden="true">#</a></h3><p>npm ci 命令可以完全安装 lock 文件描述的依赖树来安装依赖，可以用它来避免扁平化造成的 node_modules 结构不确定的问题。</p><p><code>npm ci</code> 和 <code>npm i</code> 不仅仅是是否使用 package-lock.json 的区别，<code>npm ci</code> 会删除 node_modules 中所有的内容并且毫无二心的按照package-lock.json 的结构来安装和保存包，他的目的是为了保证任何情况下产生的node_modules结构都一致的。而 <code>npm i</code> 不会删除 node_modules（如果node_modules已经存在某个包就不会重新下载了）、并且安装过程中可能还会调整并修改 package-lock.json 的内容</p><blockquote><p>实际项目中建议将 lock 也添加到 git 中，尽量使用 <code>npm ci</code> 来安装依赖，如果有依赖需要修改的，可以通过 <code>npm install xxx@xxx</code> 来安装指定依赖的指定版本，这样只会调整 lock 文件中指定依赖的依赖树，不会修改其他依赖的依赖树。</p></blockquote><h2 id="npm有哪些问题" tabindex="-1">npm有哪些问题 <a class="header-anchor" href="#npm有哪些问题" aria-hidden="true">#</a></h2><h3 id="依赖结构不确定" tabindex="-1">依赖结构不确定 <a class="header-anchor" href="#依赖结构不确定" aria-hidden="true">#</a></h3><p>假如项目依赖两个包 foo 和 bar，这两个包的依赖又是这样的:</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132330522.png" alt=""> 运行<code>npm install</code>是这样</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132331223.png" alt=""> 还是这样呢 <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132331889.png" alt=""></p><p>答案是: 都有可能。取决于 foo 和 bar 在 <code>package.json</code>中的位置，如果 foo 声明在前面，那么就是前面的结构，否则是后面的结构。</p><p>这就是为什么会产生依赖结构的<code>不确定</code>问题，也是 <code>lock 文件</code>诞生的原因之一，无论是<code>package-lock.json</code>(npm 5.x 才出现)还是<code>yarn.lock</code>，都是为了保证 install 之后都产生确定的 <code>node_modules</code> 结构。</p><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><p>扁平化导致可以非法访问没有声明过依赖的包（幽灵依赖）</p><p>“幽灵依赖” 指的是项目代码中使用了一些没有被定义在其 <strong>package.json</strong> 文件中的包。</p><p>参考下面的例子</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;">// package.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">minimatch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^3.0.4</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">rimraf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^2.6.2</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>代码中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;">// index.js</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> minimatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">minimatch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> expand </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">brace-expansion</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// ???</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> glob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">glob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)  </span><span style="color:#676E95;">// ???</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// （更多使用那些库的代码)</span></span>
<span class="line"></span></code></pre></div><p>稍等一下下… 有两个库根本没有被作为依赖定义在 package.json 文件中。那这到底是怎么跑起来的呢？</p><p>原来 brace-expansion 是 minimatch 的依赖，而 glob 是 rimraf 的依赖。在安装的时候，NPM 会打平他们的文件夹到 node_modules 。NodeJS 的 <code>require()</code> 函数能够在依赖目录找到它们，因为 <code>require()</code> 在查找文件夹时 根本不会受 package.json 文件 影响。</p><p>这是很不安全的，当未来 minimatch 中不再依赖 brace-expansion 时将会导致项目报错，因为那时整个项目可能没有如何包依赖了 brace-expansion，也就不会在顶层依赖树中有 brace-expansion，所以项目一定会因为找不到 brace-expansion 这个包而报错。</p><h4 id="分析依赖树" tabindex="-1">分析依赖树 <a class="header-anchor" href="#分析依赖树" aria-hidden="true">#</a></h4><p>npm 在分析依赖树的时候会先并行发出项目顶级的依赖解析请求，当某一个请求回来时，在去请求起所有的子依赖，直到不存在依赖为止，<strong>由于每一个树都需要根节点的依赖解析请求后才能开始解析其子树</strong>，如果依赖树深度比较深就会导致等待时间过长</p><p>递归的分析依赖树需要非常大量的http请求，这也会导致依赖树构建时间过长</p><ul><li><p>这里推荐一个分析依赖树的工具 <strong>npm-remote-ls</strong></p></li><li><p>可视化依赖关系：<a href="https://npm.anvaka.com/" target="_blank" rel="noreferrer">npm.anvaka.com/</a> 下图是 webpack 的依赖树分析结果</p></li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132345823.png" alt=""></p><h5 id="大量文件下载-解压" tabindex="-1">大量文件下载/解压 <a class="header-anchor" href="#大量文件下载-解压" aria-hidden="true">#</a></h5><p>因为 npm 下载的内容是一个个压缩包，解压后文件数量多，需要大量的IO操作（创建文件夹、创建文件、写入文件...），这也是导致 npm 慢的主要原因</p><h5 id="依然可能存在大量重复包" tabindex="-1">依然可能存在大量重复包 <a class="header-anchor" href="#依然可能存在大量重复包" aria-hidden="true">#</a></h5><p>扁平化只能会在首次遇到一个包时才会将其提升到顶部，如果项目中有A、B、C三个包分别依赖了<a href="https://link.juejin.cn?target=mailto%3AD%401.0.0" title="mailto:D@1.0.0" target="_blank" rel="noreferrer">D@1.0.0</a>、<a href="https://link.juejin.cn?target=mailto%3AD%402.0.0" title="mailto:D@2.0.0" target="_blank" rel="noreferrer">D@2.0.0</a>、<a href="https://link.juejin.cn?target=mailto%3AD%402.0.0" title="mailto:D@2.0.0" target="_blank" rel="noreferrer">D@2.0.0</a>，那么可能会产生<a href="https://link.juejin.cn?target=mailto%3AD%401.0.0" title="mailto:D@1.0.0" target="_blank" rel="noreferrer">D@1.0.0</a>被提升，<a href="https://link.juejin.cn?target=mailto%3AD%402.0.0" title="mailto:D@2.0.0" target="_blank" rel="noreferrer">D@2.0.0</a>出现在B、C的node_modelus的情况。</p><h2 id="pnpm" tabindex="-1">Pnpm <a class="header-anchor" href="#pnpm" aria-hidden="true">#</a></h2><p>pnpm 的作者<code>Zoltan Kochan</code>发现 npm/yarn 并没有打算去解决上述的这些问题，于是另起炉灶，写了全新的包管理器，开创了一套新的依赖管理机制，现在就让我们去一探究竟。</p><p>以安装 <code>express</code> 为例，我们新建一个目录，执行:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">pnpm init -y</span></span>
<span class="line"></span></code></pre></div><p>然后执行:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">pnpm install express</span></span>
<span class="line"></span></code></pre></div><p>看看node_modules</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">.pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">express</span></span>
<span class="line"><span style="color:#A6ACCD;">.modules.yaml</span></span>
<span class="line"></span></code></pre></div><p>我们直接就看到了<code>express</code>，但值得注意的是，这里仅仅只是一个<code>软链接</code>，里面并没有 node_modules 目录，如果是真正的文件位置，那么根据 node 的包加载机制，它是找不到依赖的。那么它真正的位置在哪呢？</p><p>继续在 .pnpm 当中寻找:</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">▾ node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">  ▾ .pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">    ▸ accepts@1.</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#A6ACCD;">    ▸ array</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">flatten@1.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    ▾ express@4.</span><span style="color:#F78C6C;">17</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">      ▾ node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">        ▸ accepts</span></span>
<span class="line"><span style="color:#A6ACCD;">        ▸ array</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">flatten</span></span>
<span class="line"><span style="color:#A6ACCD;">        ▸ body</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">parser</span></span>
<span class="line"><span style="color:#A6ACCD;">        ▸ content</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">disposition</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"><span style="color:#A6ACCD;">        ▸ etag</span></span>
<span class="line"><span style="color:#A6ACCD;">        ▾ express</span></span>
<span class="line"><span style="color:#A6ACCD;">          ▸ lib</span></span>
<span class="line"><span style="color:#A6ACCD;">            History.md</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">index</span><span style="color:#A6ACCD;">.js</span></span>
<span class="line"><span style="color:#A6ACCD;">            LICENSE</span></span>
<span class="line"><span style="color:#A6ACCD;">            package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">            Readme.md</span></span>
<span class="line"></span></code></pre></div><p>.pnpm/express@4.17.1/node_modules/express</p><p>随便打开一个别的包:</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132341770.png" alt=""></p><p>也都是一样的规律，都是<code>&lt;package-name&gt;@version/node_modules/&lt;package-name&gt;</code>这种目录结构。并且 express 的依赖都在<code>.pnpm/express@4.17.1/node_modules</code>下面，这些依赖也全都是<strong>软链接</strong>。</p><p>将 <code>包本身</code> 和 <code>依赖</code> 放在同一个<code>node_module</code>下面，与原生 Node 完全兼容，又能将 package 与相关的依赖很好地组织到一起，设计十分精妙。</p><p>再看看<code>.pnpm</code>，<code>.pnpm</code>目录下虽然呈现的是扁平的目录结构，但仔细想想，顺着<code>软链接</code>慢慢展开，其实就是嵌套的结构！</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208132342952.png" alt=""></p><p>现在我们回过头来看，根目录下的 node_modules 下面不再是眼花缭乱的依赖，而是跟 package.json 声明的依赖基本保持一致。即使 pnpm 内部会有一些包会设置依赖提升，会被提升到根目录 node_modules 当中，但整体上，根目录的<code>node_modules</code>比以前还是清晰和规范了许多。</p><p>pnpm 使用类似 maven 一样将所有的包都存放在一个 .pnpm 缓存目录中，然后在 node_modules 中创建一个软链接链接到缓存目录中对应的包上，解决了重复依赖的问题。而 .pnpm 中的文件又是通过硬链接来链接到一个全局的包存放地址中，也就是说同一个包的某个版本在你的电脑上只会出现一份代码，无论你有多少个项目使用了多少次这个包。因为每一个项目中的 .pnpm 中都只是通过一个硬链接指向同一份代码。</p><h3 id="如何做到项目隔离" tabindex="-1">如何做到项目隔离？ <a class="header-anchor" href="#如何做到项目隔离" aria-hidden="true">#</a></h3><p>因为 .pnpm 中都是通过硬链接来链接到同一份源码文件，当我们在某个项目中修改了这个包的文件时，所有项目中这个包都会被修改，这导致无法做到修改的项目隔离。</p><p>好在我们有 webstorm ，webstorm 以及对此作了优化，当你在修改其 node_modules 中的内容时，不会直接修改到这个硬链接到目标文件，而是将目标文件 copy 一份到当前项目下，然后对其进行修改，这样就不会影响到其他项目。</p><p>很遗憾 vscode 目前好像没有这功能。</p><p>pnpm 跟 webstorm 跟配哟～</p><h2 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-hidden="true">#</a></h2><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202208140005578.png" alt=""></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/7100640780301107231" target="_blank" rel="noreferrer">npm与pnpm</a><a href="https://juejin.cn/post/7036319707590295565" target="_blank" rel="noreferrer">pnpm解决了什么</a></p>`,133),e=[l];function t(c,r,D,y,F,i){return a(),n("div",null,e)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
