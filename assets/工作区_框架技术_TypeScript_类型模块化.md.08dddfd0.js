import{_ as s,c as a,o as n,a as l}from"./app.c99ff793.js";const C=JSON.parse('{"title":"模块化的笔记","description":"","frontmatter":{"title":"模块化的笔记","tags":["模块化"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期二, 十一月 1日 2022, 11:00:52 晚上"},"headers":[{"level":2,"title":"最先开始的模块化-namespace","slug":"最先开始的模块化-namespace","link":"#最先开始的模块化-namespace","children":[]},{"level":2,"title":"Module","slug":"module","link":"#module","children":[]},{"level":2,"title":"Es Module","slug":"es-module","link":"#es-module","children":[{"level":3,"title":"Ts导出","slug":"ts导出","link":"#ts导出","children":[]},{"level":3,"title":"Ts导入","slug":"ts导入","link":"#ts导入","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"工作区/框架技术/TypeScript/类型模块化.md"}'),p={name:"工作区/框架技术/TypeScript/类型模块化.md"},o=l(`<p>#模块化</p><h1 id="模块化的笔记" tabindex="-1">模块化的笔记 <a class="header-anchor" href="#模块化的笔记" aria-hidden="true">#</a></h1><h2 id="最先开始的模块化-namespace" tabindex="-1">最先开始的模块化-namespace <a class="header-anchor" href="#最先开始的模块化-namespace" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Guang</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">        name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">        age</span><span style="color:#89DDFF;">?:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">guang</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">guang</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>原理：就是全局上放一个对象，然后对象上再挂几个暴露出去的属性。</p><h2 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">xxx</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">import</span><span style="color:#F07178;"> ...</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">export</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> = 1</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">import</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">xxx</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这个 module 和 namespace 有什么区别呢？</p><p>其实真没什么区别，只不过 module 后一般接一个路径，而 namespace 后一半是一个命名空间名字。其他的语法都一样的。</p><h2 id="es-module" tabindex="-1">Es Module <a class="header-anchor" href="#es-module" aria-hidden="true">#</a></h2><p>从ECMAScript 2015开始，JavaScript引入了“模块”的概念，TypeScript也沿用这个概念。<strong>模块是自声明的，一个文件即是一个模块，两个模块之间的关系是通过在文件级别上使用<code>imports</code>和<code>exports</code>建立的。</strong></p><p>模块在其自身的作用域里执行，而不是在全局作用域里，这意味着定义在一个模块里的变量、函数、类等等在模块外部是不可见的，除非你明确地使用<code>export</code>形式之一导出它们。相反，如果想使用其它模块导出的变量、函数、类、接口等，你必须要导入它们，可以使用<code>\`import</code>形式之一。</p><p>模块使用模块加载器去导入其它的模块。在运行时，模块加载器的作用是在执行此模块代码前去查找并执行这个模块的所有依赖。大家最熟知的JavaScript模块加载器是服务于Node.js的CommonJS和服务于Web应用的Require.js。</p><p>TypeScript与ECMAScript 2015一样，任何包含顶级import或者export的文件都被当成一个模块。</p><h3 id="ts导出" tabindex="-1">Ts导出 <a class="header-anchor" href="#ts导出" aria-hidden="true">#</a></h3><h4 id="导出声明" tabindex="-1">导出声明 <a class="header-anchor" href="#导出声明" aria-hidden="true">#</a></h4><h4 id="导出语句" tabindex="-1">导出语句 <a class="header-anchor" href="#导出语句" aria-hidden="true">#</a></h4><h4 id="重新导出" tabindex="-1">重新导出 <a class="header-anchor" href="#重新导出" aria-hidden="true">#</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Xxx</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"></span></code></pre></div><h3 id="ts导入" tabindex="-1">Ts导入 <a class="header-anchor" href="#ts导入" aria-hidden="true">#</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Xxx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>namespace：最早的实现模块的方式，编译为声明对象和设置对象的属性的 JS 代码，很容易理解</li><li>module：和 namespace 的 AST 没有任何区别，只不过一般用来声明 CommonJS 的模块，在 @types/node 下有很多</li><li>es module：es 标准的模块语法，ts 额外扩展了 import type</li></ul><p>dts 的类型声明默认是全局的，除非有 es module 的 import、export 的声明，这时候就要手动 declare global 了。为了避免这种情况，可以用 reference 的编译器指令。 <strong>reference替代import、export的方式</strong></p>`,24),e=[o];function t(c,r,F,y,i,D){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
