import{_ as s,c as a,o as n,a as p}from"./app.c99ff793.js";const C=JSON.parse('{"title":"构造函数、对象实例、原型的关系","description":"","frontmatter":{"title":"构造函数、对象实例、原型的关系","date":"2022-05-26T12:42:26.000Z","tags":["JavaScript"],"excerpt":"三者关系分析"},"headers":[{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":3,"title":"成员","slug":"成员","link":"#成员","children":[]},{"level":3,"title":"构造函数原型prototype","slug":"构造函数原型prototype","link":"#构造函数原型prototype","children":[]},{"level":3,"title":"对象原型__proto__","slug":"对象原型-proto","link":"#对象原型-proto","children":[]}]},{"level":2,"title":"关系","slug":"关系","link":"#关系","children":[]},{"level":2,"title":"JavaScript的成员查找机制","slug":"javascript的成员查找机制","link":"#javascript的成员查找机制","children":[]},{"level":2,"title":"原型对象的this指向","slug":"原型对象的this指向","link":"#原型对象的this指向","children":[]}],"relativePath":"工作区/基本知识/JavaScript/构造函数、对象实例、原型的关系.md"}'),l={name:"工作区/基本知识/JavaScript/构造函数、对象实例、原型的关系.md"},o=p(`<p>#构造函数、原型对象和实例之间的关系</p><h1 id="构造函数、对象实例、原型的关系" tabindex="-1">构造函数、对象实例、原型的关系 <a class="header-anchor" href="#构造函数、对象实例、原型的关系" aria-hidden="true">#</a></h1><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-hidden="true">#</a></h2><p>利用构造函数创建对象时，注意两点：</p><ul><li>构造函数用于创建对象时，函数名首字母大写</li><li>构造函数要和new一起用才有意义</li></ul><p><strong>new在执行时会做四件事情：</strong></p><ol><li><p>在内存中创建一个空的对象</p></li><li><p>让this指向这个新的对象</p></li><li><p>执行构造函数里面的代码，给这个新对象添加属性和方法</p></li><li><p>返回这个新对象（所以构造函数里面不要return）</p></li></ol><p>利用构造函数创建对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">play</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我打球贼厉害</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">James</span><span style="color:#89DDFF;">=new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">詹姆斯</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">，</span><span style="color:#F78C6C;">37</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="成员" tabindex="-1">成员 <a class="header-anchor" href="#成员" aria-hidden="true">#</a></h3><blockquote><p><strong>静态成员：在构造函数上添加的成员，只能由构造函数本身来访问。</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">play</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我打球贼厉害</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sex</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">男</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sex)</span><span style="color:#676E95;">//男</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(James</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sex)</span><span style="color:#676E95;">//undefined</span></span>
<span class="line"></span></code></pre></div><blockquote><p>这个可以类比Java的静态变量</p></blockquote><blockquote><p><strong>实例成员：在构造函数内部创建（this添加）的对象的成员，只能由实例化对象来访问。</strong></p></blockquote><p>这里的name,age,play就是实例成员 play应该称为实例方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(James</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name) </span><span style="color:#676E95;">//詹姆斯</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#676E95;">//undefined </span></span>
<span class="line"></span></code></pre></div><h3 id="构造函数原型prototype" tabindex="-1">构造函数原型prototype <a class="header-anchor" href="#构造函数原型prototype" aria-hidden="true">#</a></h3><p>构造函数通过原型分配的函数是所有对象共享的。</p><p>JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象。注意这里的prototype就是一个对象，这个对象所有的属性和方法，都会被构造函数所拥有。</p><p>打印个实例对象</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301607314.png" alt="image-20220530160724265"></p><p>原型prototype是个对象。</p><p>那prototype有啥用呢？我们可以把那些不变的方法，直接定义在prototype原型上，这样所有对象的实例就可以共享这些方法，这样就可以避免内存浪费的问题，比如我再通过new Star()去实例一个新的对象，新的对象也会有paly方法，由于函数属于复杂数据类型，这样内存就又会开辟空间去存储这个函数，这样就会造成内存浪费。</p><h3 id="对象原型-proto" tabindex="-1">对象原型<code>__proto__</code> <a class="header-anchor" href="#对象原型-proto" aria-hidden="true">#</a></h3><p>对象都会有一个__proto__属性，<em>指向构造函数的prototype原型对象上</em>，之所以对象可以使用构造函数的prototype原型对象上的属性和方法，就是因为有__proto__原型的存在。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301613876.png" alt="image-20220530161348840"></p><h4 id="方法的查找原则" tabindex="-1">方法的查找原则： <a class="header-anchor" href="#方法的查找原则" aria-hidden="true">#</a></h4><p>首先先看<code>a</code>这个对象身上是否有<code>play</code>方法，如果有就执行，如果没有，因为有<code>__proto__</code>的存在，就去构造函数原型对象prototype身上去查找play这个方法，有就执行。</p><h2 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-hidden="true">#</a></h2><p><code>__proto__</code>对象原型和原型对象 prototype是等价的 <strong>proto</strong></p><p>对象原型的意义就在于为对象的查找机制提供一个方向,或者说一条路线,但是它是一个非标准属性, 因此实际开发中,不可以使用这个属性,它只是内部指向原型对象prototype</p><p>对象原型(<strong>proto</strong>) 和构造函数( prototype )原型对象里面都有一个属性 constructor属性, constructor 我们称为构造函数,因为它指回构造函数本身。 constructor主要用于记录该对象引|用于哪个构造函数,它可以让原型对象重新指向原来的构造函数。</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205301620177.awebp" alt="img"></p><h2 id="javascript的成员查找机制" tabindex="-1">JavaScript的成员查找机制 <a class="header-anchor" href="#javascript的成员查找机制" aria-hidden="true">#</a></h2><ol><li>当访问一个对象的属性(包括方法)时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型(也就是_ <em>proto</em> 指向的prototype原型对象)。</li><li>如果还没有就查找原型对象的原型( Object的原型对象)。</li><li>依此类推一直找到Object为止 ( null)。</li></ol><h2 id="原型对象的this指向" tabindex="-1">原型对象的this指向 <a class="header-anchor" href="#原型对象的this指向" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">              </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> that</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我打球贼厉害</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)       </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">that</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">      </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> James </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">詹姆斯</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">37</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(that </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> James)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">//false</span></span>
<span class="line"><span style="color:#676E95;">// 运行James.play()后</span></span>
<span class="line"><span style="color:#A6ACCD;">James</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(that </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> James)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">//true</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ul><li>在构造函数中，里面this指向的是对象实例 James</li><li>原型对象函数里面的this指向的是实例对象 James</li></ul><p>所以指向的都是实例对象！</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202205302157853.png" alt="图片"></p>`,41),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
