import{_ as s,c as a,o as n,a as l}from"./app.6426b36b.js";const A=JSON.parse('{"title":"策略模式的笔记","description":"","frontmatter":{"title":"策略模式的笔记","tags":["策略模式"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期日, 七月 31日 2022, 8:42:38 晚上"},"headers":[],"relativePath":"工作区/设计模式/策略模式.md"}'),p={name:"工作区/设计模式/策略模式.md"},o=l(`<p>#设计模式 #策略模式</p><h1 id="策略模式的笔记" tabindex="-1">策略模式的笔记 <a class="header-anchor" href="#策略模式的笔记" aria-hidden="true">#</a></h1><blockquote><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p></blockquote><p>优点：</p><ul><li>利用组合、委托、多态等技术和思想，可以有效地避免多重条件选择语句。</li><li>策略模式提供了对开放——封闭原则的完美支持。</li><li>策略模式的算法可以复用在系统的其他地方。从而避免许多重复的复制粘贴工作。</li><li>在策略模式中利用组合和委托来让Context拥有执行算法的能力。</li></ul><p>缺点：</p><ul><li>使用策略模式会在程序中增加许多策略类与策略对象。但实际这把它们负责的逻辑多切在Context中要好。</li><li>要使用策略模式，必须了解所有的strategy，必须了解各个strategy之间的不同点，这样才能选择一个合适的strategy。</li></ul><p>在JavaScript中，函数是一等公民。</p><blockquote><p>Peter Norvig曾说过：在函数作为一等对象的语言中，策略模式是隐形的。strategy就是值为函数的变量。</p></blockquote><p>JS中，除了使用类来封装算法和行为之外，使用函数当然也是一种选择。这些&quot;算法&quot;可以被封装到函数中并且四处传递。也就是&quot;高阶函数&quot;。当我们对这些函数发出调用的消息时，不同函数会返回不同的执行结果。在JS中，函数对象的多态性来得更加简单。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> S </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">salarty</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> calculateBonus </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">salary</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">func</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">salary</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">calculateBonus</span><span style="color:#A6ACCD;">(S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">//400</span></span>
<span class="line"></span></code></pre></div>`,11),t=[o];function e(c,r,y,i,D,C){return n(),a("div",null,t)}const u=s(p,[["render",e]]);export{A as __pageData,u as default};
