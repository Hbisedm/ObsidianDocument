import{_ as e,c as t,o as s,a}from"./app.6426b36b.js";const f=JSON.parse('{"title":"2022-11-01 的日记","description":"","frontmatter":{"title":"2022-11-01 的日记","tags":["2022-11-01 的日记"],"创建时间":"星期二, 十一月 1日 2022, 10:48:35 晚上","修改时间":"星期二, 十一月 1日 2022, 11:01:45 晚上"},"headers":[{"level":2,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[]},{"level":2,"title":"八股文","slug":"八股文","link":"#八股文","children":[]}],"relativePath":"日记/2022-11-01 的日记.md"}'),c={name:"日记/2022-11-01 的日记.md"},p=a(`<p>#日记</p><h1 id="_2022-11-01-的日记" tabindex="-1">2022-11-01 的日记 <a class="header-anchor" href="#_2022-11-01-的日记" aria-hidden="true">#</a></h1><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h2><p>今日明白了ts的一些配置(以前想不明白)</p><p>引入一些js，要使用它的话，引入它对应的@types</p><p>如果是自定义的js的话，可以自己写<code>d.ts</code> 文件，让ts可以去识别这个类型</p><blockquote><p>这个时候就得去知道 ts默认匹配的<code>d.ts</code>的路径是什么样</p></blockquote><p>定义<code>d.ts</code>的语法 [[类型模块化#总结]]</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> xxx</span></span>
<span class="line"></span></code></pre></div><h2 id="八股文" tabindex="-1">八股文 <a class="header-anchor" href="#八股文" aria-hidden="true">#</a></h2><ul><li>[[Vue#01-Vue组件之间通信方式有哪些]]</li><li>[[Vue#02-v-if和v-for哪个优先级更高？]]</li></ul>`,11),i=[p];function l(n,r,o,d,_,h){return s(),t("div",null,i)}const y=e(c,[["render",l]]);export{f as __pageData,y as default};
