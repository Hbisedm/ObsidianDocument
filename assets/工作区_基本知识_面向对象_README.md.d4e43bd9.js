import{_ as e,c as a,o as i,a as l}from"./app.6426b36b.js";const m=JSON.parse('{"title":"README的笔记","description":"","frontmatter":{"title":"README的笔记","tags":["README"],"创建时间":"星期三, 十一月 9日 2022, 11:21:07 上午","修改时间":"星期三, 十一月 9日 2022, 1:42:57 下午"},"headers":[{"level":2,"title":"面向对象编程基础","slug":"面向对象编程基础","link":"#面向对象编程基础","children":[{"level":3,"title":"抽象","slug":"抽象","link":"#抽象","children":[]},{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]}]},{"level":2,"title":"关系","slug":"关系","link":"#关系","children":[]}],"relativePath":"工作区/基本知识/面向对象/README.md"}'),r={name:"工作区/基本知识/面向对象/README.md"},t=l('<p>#面向对象</p><h1 id="readme的笔记" tabindex="-1">README的笔记 <a class="header-anchor" href="#readme的笔记" aria-hidden="true">#</a></h1><h2 id="面向对象编程基础" tabindex="-1">面向对象编程基础 <a class="header-anchor" href="#面向对象编程基础" aria-hidden="true">#</a></h2><p>面向对象四个概念</p><ul><li>抽象</li><li>多态</li><li>封装</li><li>继承</li></ul><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202211091123784.png" alt=""></p><h3 id="抽象" tabindex="-1">抽象 <a class="header-anchor" href="#抽象" aria-hidden="true">#</a></h3><p>抽象是一种反映真实世界对象或现象中特定内容的模型， 它 能高精度地反映所有与特定内容相关的详细信息， 同时忽略 其他内容。</p><h3 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-hidden="true">#</a></h3><p>封装是指一个对象对其他对象隐藏其部分状态和行为， 而仅向程序其他部分暴露有限的接口的能力。</p><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-hidden="true">#</a></h3><p>继承是指在根据已有类创建新类的能力。 继承最主要的好处是代码复用。 如果你想要创建的类与已有的类差异不大， 那也没必要重复编写相同的代码。 你只需扩展已有的类并将额外功能放入生成的子类 （它会继承父类的成员变量和方法） 中即可。</p><h3 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-hidden="true">#</a></h3><p>多态是指程序能够检测对象所属的实际类，<strong>并在当前上下文不知道其真实类型的情况下调用其实现的能力</strong>。</p><h2 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-hidden="true">#</a></h2><p>[[类的关系]] <a href="https://www.cnblogs.com/zhongj/p/11169780.html" target="_blank" rel="noreferrer">参考链接</a></p><ul><li>继承(泛化)</li><li>实现</li><li>依赖</li><li>关联</li><li>聚合</li><li>组合</li></ul>',17),n=[t];function h(d,s,c,o,p,_){return i(),a("div",null,n)}const g=e(r,[["render",h]]);export{m as __pageData,g as default};
