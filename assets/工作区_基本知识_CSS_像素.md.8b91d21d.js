import{_ as e,c as i,o as p,a}from"./app.6426b36b.js";const g=JSON.parse('{"title":"像素的笔记","description":"","frontmatter":{"title":"像素的笔记","tags":["像素"],"创建时间":"星期六, 一月 7日 2023, 12:37:55 下午","修改时间":"星期六, 一月 7日 2023, 2:11:12 下午"},"headers":[{"level":2,"title":"CSS像素","slug":"css像素","link":"#css像素","children":[]},{"level":2,"title":"设备像素","slug":"设备像素","link":"#设备像素","children":[]},{"level":2,"title":"设备独立像素","slug":"设备独立像素","link":"#设备独立像素","children":[]},{"level":2,"title":"Dpr","slug":"dpr","link":"#dpr","children":[]},{"level":2,"title":"PPI","slug":"ppi","link":"#ppi","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"工作区/基本知识/CSS/像素.md"}'),r={name:"工作区/基本知识/CSS/像素.md"},l=a('<p>#像素</p><h1 id="像素的笔记" tabindex="-1">像素的笔记 <a class="header-anchor" href="#像素的笔记" aria-hidden="true">#</a></h1><ul><li>Css像素</li><li>设备像素(物理像素)</li><li>设备独立像素</li><li>DPR</li><li>PPI</li></ul><h2 id="css像素" tabindex="-1">CSS像素 <a class="header-anchor" href="#css像素" aria-hidden="true">#</a></h2><p>CSS规范中，长度单位可以分为两类，绝对单位以及相对单位。</p><p>px是一个相对单位，相对的是设备像素。</p><p>一般而言，页面缩放比为1的话，1个CSS像素等于一个设备像素</p><p>CSS像素又具有两个方面的相对性：</p><ul><li>在同一个设备上，每1个CSS像素所代表的设备像素是可以变化的(调整屏幕分辨率)</li><li>在不同设备之间，每1个CSS像素所代表的设备像素是是可以变化的(两个不型号的手机)</li></ul><p>在页面进行缩放操作也会引起css中px的变化，比如页面放大一倍，原来的1px就是2px了</p><p>假设原来需要320px才能填满的宽度现在只需要160px了</p><p>px会受到这些因素的影响</p><ul><li>每英寸像素(PPI)</li><li>设备像素比(DPR)</li></ul><h2 id="设备像素" tabindex="-1">设备像素 <a class="header-anchor" href="#设备像素" aria-hidden="true">#</a></h2><p>设备像素（device pixels），又称为物理像素</p><p>指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个“点”而已</p><p>可以参考公园里的景观变色彩灯，一个彩灯(物理像素)由红、蓝、绿小灯组成，三盏小灯不同的亮度混合出各种色彩</p><p>从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为pt</p><h2 id="设备独立像素" tabindex="-1">设备独立像素 <a class="header-anchor" href="#设备独立像素" aria-hidden="true">#</a></h2><p>设备独立像素（Device Independent Pixel）：与设备无关的<strong>逻辑像素</strong>，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了CSS像素</p><p>在javaScript中可以通过 <code>window.screen.width/ window.screen.height</code> 查看</p><p>一个设备独立像素里可能包含1个或者多个物理像素点，包含的越多则屏幕看起来越清晰</p><p>至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子：</p><p>iPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960</p><p>这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素</p><p>如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位</p><p>我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素</p><p>至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是下面介绍的dpr</p><h2 id="dpr" tabindex="-1">Dpr <a class="header-anchor" href="#dpr" aria-hidden="true">#</a></h2><p>dpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系。</p><p>在JavaScript中可以通过 <code>window.devicePixelRatio</code> 获取</p><p>计算公式: DPR = 设备像素 / 设备独立像素</p><p>当设备像素比为1:1时，使用1（1×1）个设备像素显示1个CSS像素</p><p>当设备像素比为2:1时，使用4（2×2）个设备像素显示1个CSS像素</p><p>当设备像素比为3:1时，使用9（3×3）个设备像素显示1个CSS像素</p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202301071256573.png" alt="image.png"></p><h2 id="ppi" tabindex="-1">PPI <a class="header-anchor" href="#ppi" aria-hidden="true">#</a></h2><p>ppi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是<strong>像素密度</strong>。数值越高，说明屏幕能以<strong>更高密度显示图像</strong></p><p><img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202301071302295.png" alt="image.png"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>无缩放情况下，1个CSS像素等于1个设备独立像素</p><p>设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变</p><p>PC端中，1个设备独立像素 = 1个设备像素 （在100%，未缩放的情况下）</p><p>在移动端中，标准屏幕（160ppi）下 1个设备独立像素 = 1个设备像素</p><p>设备像素比（dpr） = 设备像素 / 设备独立像素</p><p>每英寸像素（ppi），值越大，图像越清晰</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSS_pixel" target="_blank" rel="noreferrer">CSS_Pixel</a></li><li><a href="https://hijiangtao.github.io/2017/07/09/Device-Viewport-and-Pixel-Introduction/" target="_blank" rel="noreferrer">知识点整理 - 前端涉及的各种像素概念以及 viewport 汇总</a></li></ul>',48),t=[l];function n(d,h,s,o,c,S){return p(),i("div",null,t)}const _=e(r,[["render",n]]);export{g as __pageData,_ as default};
