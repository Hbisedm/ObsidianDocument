import{_ as e,c as a,o as i,a as t}from"./app.64cc5612.js";const I=JSON.parse('{"title":"CI与CD","description":"","frontmatter":{"title":"CI与CD","date":"2022-07-26T11:19:10.000Z","tags":["CI","CD"]},"headers":[{"level":2,"title":"CI","slug":"ci","link":"#ci","children":[]},{"level":2,"title":"CD","slug":"cd","link":"#cd","children":[{"level":3,"title":"持续交付","slug":"持续交付","link":"#持续交付","children":[]},{"level":3,"title":"持续部署","slug":"持续部署","link":"#持续部署","children":[]}]}],"relativePath":"工作区/开发工具/CI与CD.md"}'),r={name:"工作区/开发工具/CI与CD.md"},l=t('<p>#CI #CD</p><h1 id="ci与cd的笔记" tabindex="-1">CI与CD的笔记 <a class="header-anchor" href="#ci与cd的笔记" aria-hidden="true">#</a></h1><blockquote><p>持续集成与持续部署、持续交付</p></blockquote><ol><li>提交修改的代码到目标仓库</li><li>测试代码能不能通过 (CI服务器)</li><li>通过则合并到分支上，否则合并被阻止！</li><li>构建成包文件(如前端的npm run build)</li><li>替换服务器上的文件</li></ol><h2 id="ci" tabindex="-1">CI <a class="header-anchor" href="#ci" aria-hidden="true">#</a></h2><p>每次推送更改时，git服务器向CI服务器发送通知。 CI服务器克隆Git仓库，检出分支，并与主分支合并 然后启动构建脚本</p><p>一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。这意味着测试内容涵盖了从类和函数到构成整个应用的不同模块。如果自动化测试发现新代码和现有代码之间存在冲突，CI 可以更加轻松地快速修复这些错误。</p><h2 id="cd" tabindex="-1">CD <a class="header-anchor" href="#cd" aria-hidden="true">#</a></h2><h3 id="持续交付" tabindex="-1">持续交付 <a class="header-anchor" href="#持续交付" aria-hidden="true">#</a></h3><p>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p><p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p><h3 id="持续部署" tabindex="-1">持续部署 <a class="header-anchor" href="#持续部署" aria-hidden="true">#</a></h3><p>对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。</p><p>实际上，持续部署意味着开发人员对应用的更改在编写后的几分钟内就能生效（假设它通过了自动化测试）。这更加便于持续接收和整合用户反馈。总而言之，所有这些 CI/CD 的关联步骤都有助于降低应用的部署风险，因此更便于以小件的方式（而非一次性）发布对应用的更改。不过，由于还需要编写自动化测试以适应 CI/CD 管道中的各种测试和发布阶段，因此前期投资还是会很大。</p><p><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noreferrer">什么是CI/CD</a></p>',15),d=[l];function c(n,h,s,o,C,p){return i(),a("div",null,d)}const u=e(r,[["render",c]]);export{I as __pageData,u as default};
