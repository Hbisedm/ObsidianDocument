import{_ as e,c as l,o as a,a as i}from"./app.c99ff793.js";const m=JSON.parse('{"title":"EsModule的学习的笔记","description":"","frontmatter":{"title":"EsModule的学习的笔记","date":"2022-07-03 20:43:19","tags":["EsModule的学习"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期四, 十二月 22日 2022, 11:41:43 中午"},"headers":[{"level":2,"title":"ESM的特效","slug":"esm的特效","link":"#esm的特效","children":[]},{"level":2,"title":"模块化的作用","slug":"模块化的作用","link":"#模块化的作用","children":[]},{"level":2,"title":"模块也是一种作用域","slug":"模块也是一种作用域","link":"#模块也是一种作用域","children":[]},{"level":2,"title":"ESModule的工作","slug":"esmodule的工作","link":"#esmodule的工作","children":[{"level":3,"title":"构建阶段","slug":"构建阶段","link":"#构建阶段","children":[]},{"level":3,"title":"实例化阶段","slug":"实例化阶段","link":"#实例化阶段","children":[]},{"level":3,"title":"运行阶段","slug":"运行阶段","link":"#运行阶段","children":[]},{"level":3,"title":"运行","slug":"运行","link":"#运行","children":[]}]},{"level":2,"title":"待删除","slug":"待删除","link":"#待删除","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"relativePath":"工作区/开发问题/EsModule的学习.md"}'),s={name:"工作区/开发问题/EsModule的学习.md"},t=i(`<p>#EsModule</p><h1 id="esmodule的学习的笔记" tabindex="-1">EsModule的学习的笔记 <a class="header-anchor" href="#esmodule的学习的笔记" aria-hidden="true">#</a></h1><blockquote><p>ESModule工作分为3个步骤：构建、实例化、运行 构建目的：文件解析为模块记录 实例化目的：为模块记录分配空间，然后使得<code>import</code>与<code>export</code>执行那块内存空间 运行目的：为内存空间里面的值填充真实值</p></blockquote><h2 id="esm的特效" tabindex="-1">ESM的特效 <a class="header-anchor" href="#esm的特效" aria-hidden="true">#</a></h2><ul><li>自动采用严格模式，忽略&#39;use strict&#39;</li><li>每个 ESM 模块都是单独的私有作用域</li><li>ESM 是通过 CORS 去请求外部 JS 模块的</li><li>ESM 的script 标签会延迟执行脚本</li></ul><h2 id="模块化的作用" tabindex="-1">模块化的作用 <a class="header-anchor" href="#模块化的作用" aria-hidden="true">#</a></h2><p><strong>模块化为你提供了一种更好的方式来组织变量和函数</strong>。你可以把相关的变量和函数放在一起组成一个模块。 这种组织方式会把函数和变量放在<strong>模块作用域</strong>中。模块中的函数可以通过模块作用域来共享变量。</p><h2 id="模块也是一种作用域" tabindex="-1">模块也是一种作用域 <a class="header-anchor" href="#模块也是一种作用域" aria-hidden="true">#</a></h2><p>。</p><h2 id="esmodule的工作" tabindex="-1">ESModule的工作 <a class="header-anchor" href="#esmodule的工作" aria-hidden="true">#</a></h2><ol><li><strong>构建</strong>：查找，下载，然后把所有文件解析成模块记录。</li><li><strong>实例化</strong>：为所有模块分配内存空间（此刻还没有填充值），然后依照导出、导入语句把模块指向对应的内存地址。这个过程称为<strong>链接</strong>（Linking）。</li><li><strong>运行</strong>：运行代码，从而把内存空间填充为真实值。</li></ol><h3 id="构建阶段" tabindex="-1">构建阶段 <a class="header-anchor" href="#构建阶段" aria-hidden="true">#</a></h3><p>做三件事</p><ul><li>确定依赖从哪里来(模块定位)</li><li>提取文件，通过==URL下载==或者==文件系统加载==</li><li>==解析==文件为模块记录</li></ul><h5 id="模块实例-解析后的模块记录" tabindex="-1">模块实例：解析后的模块记录 <a class="header-anchor" href="#模块实例-解析后的模块记录" aria-hidden="true">#</a></h5><p>而阻塞主线程会使得应用变得卡顿，影响用户体验。这是 ESM 标准把算法分成多个阶段的原因之一。将构建划分为一个独立阶段后，浏览器可以在进入同步的实例化过程之前下载文件然后理解模块关系图。</p><ol><li>下载模块 <ul><li>加载器</li><li>模块定位符</li><li>模块定位算法 <ul><li>ESM 和 CJS 之间最主要的区别之一就是，ESM 把算法化为为多个阶段。</li><li><blockquote><ul><li>CJS 使用不同的算法是因为它从文件系统加载文件，这耗费的时间远远小于从网络上下载。因此 Node 在加载文件的时候可以阻塞主线程，而不造成太大影响。而且既然文件已经加载完成了，那么它就可以直接进行实例化和运行。所以在 CJS 中实例化和运行并不是两个相互独立的阶段。这也意味着，你可以在返回模块实例之前，顺着整颗依赖树去逐一加载、实例化和运行每一个依赖。</li></ul></blockquote></li><li><strong>为啥esm不能使用变量导入而cjs可以</strong>因为js会看当前的代码里面有没有<code>import</code>，有的话会先创建个==依赖关系图==这个时候会变量提升，但是变量提升还没赋值的时候呢。所以不可以使用变量的方式进行导入</li><li>为了在 ESM 中实现这种方式，人们已经提出了一个<strong>动态导入</strong>提案。该提案允许你可以使用类似 <code>import(\\\`\${path}/foo.js\`)</code>的导入语句。</li></ul></li></ul></li></ol><p>这种方式实际上是把使用 <code>import()</code> 加载的文件当成了一个入口文件。动态导入的模块会开启一个全新的独立依赖关系树。</p><blockquote><p>加载器使用<strong>模块映射</strong>（Module Map）来管理缓存。每个<strong>全局作用域</strong>都在一个单独的模块映射中跟踪其模块。</p></blockquote><blockquote><p>模块映射(fetch(下载) -&gt; 模块记录)</p></blockquote><p>映射表里：多个模块记录</p><ol start="2"><li>解析模块 <blockquote><p>注意点：</p><ul><li>按照<strong>严格模式</strong>去解析模块，解析后会维护个模块映射，未来解析模块时，会先去模块映射内看看有没有这个模块，因为cache下来在里面了。</li><li>await为顶部保留字，this为undefined</li><li>不同的解析方式称为解析目标(Parse Goal)。不同的解析目标(方式)解析同一个文件会得到不同的结果</li></ul></blockquote></li></ol><h3 id="实例化阶段" tabindex="-1">实例化阶段 <a class="header-anchor" href="#实例化阶段" aria-hidden="true">#</a></h3><p>为模块分配内存空间，但是没有赋真实值，为了未来的运行阶段好操作准备。这时候导出(<code>export</code>)、导入(<code>import</code>)指向的模块就指向了这个内存地址。 为了实例化模块关系图。采用<strong>深度优先的后序遍历方式</strong> 即，它会顺着关系图到达最底端没有任何依赖的模块，然后设置它们的导出。 最终，引擎会把模块下的所有依赖导出链接到当前模块。然后回到上一层把模块的导入链接起来。</p><h4 id="与cjs的区别" tabindex="-1">与CJS的区别 <a class="header-anchor" href="#与cjs的区别" aria-hidden="true">#</a></h4><p>CJS是值拷贝，ESM是值引用 <img src="https://raw.githubusercontent.com/Hbisedm/my-blob-picGo/main/img/202207102307596.png" alt=""></p><h3 id="运行阶段" tabindex="-1">运行阶段 <a class="header-anchor" href="#运行阶段" aria-hidden="true">#</a></h3><blockquote><p>一个模块实例结合了代码和状态。状态存储在内存中，所以实例化的过程就是把所有值写入内存的过程。</p></blockquote><ul><li>模块环境记录 <ul><li>它管理着模块记录的所有变量。然后，引擎会找出多有导出在内存中的地址。模块环境记录会跟踪每个导出对应于哪个内存地址。</li></ul></li></ul><p>这些内存地址此时还没有值，只有等到运行后它们才会被填充上实际值。<strong>有一点要注意，所有导出的函数声明都在这个阶段初始化</strong>，这会使得后面的运行阶段变得更加简单。</p><p>为了实例化模块关系图，引擎会采用<strong>深度优先的后序遍历方式</strong>。<br> 即，它会顺着关系图到达最底端没有任何依赖的模块，然后设置它们的导出。</p><h3 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-hidden="true">#</a></h3><p>最后一步是往已申请好的内存空间中填入真实值。JS 引擎通过运行顶层代码（函数外的代码）来完成填充。 除了填充值以外，运行代码也会引发一些副作用（Side Effect）。例如，一个模块可能会向服务器发起请求。</p><h2 id="待删除" tabindex="-1">待删除 <a class="header-anchor" href="#待删除" aria-hidden="true">#</a></h2><ol><li>找出从哪里下载包含模块的文件（又名模块解析）</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// 在 html 中</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script src=&quot;main.js&quot; type=&quot;module&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 在 js 中</span></span>
<span class="line"><span style="color:#A6ACCD;">import { count } from &#39;./count.js&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="2"><li>获取文件（通过从 URL 下载或从文件系统加载），并添加到模块映射中。</li></ol><p>异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script&gt;</code>标签的<code>defer</code>属性。[[Script里async与defer的区别]]</p><ol start="3"><li>生成模块记录，并添加到模块映射中。</li></ol><h2 id="资料" tabindex="-1">资料 <a class="header-anchor" href="#资料" aria-hidden="true">#</a></h2><p><a href="https://segmentfault.com/a/1190000014318751" target="_blank" rel="noreferrer">图说 ES Modules</a></p>`,41),o=[t];function r(n,d,c,h,p,u){return a(),l("div",null,o)}const b=e(s,[["render",r]]);export{m as __pageData,b as default};
