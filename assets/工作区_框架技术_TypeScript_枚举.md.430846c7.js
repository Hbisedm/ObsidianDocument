import{_ as e,c as a,o as t,a as r}from"./app.0b159a37.js";const f=JSON.parse('{"title":"枚举的笔记","description":"","frontmatter":{"title":"枚举的笔记","tags":["枚举"],"创建时间":"星期三, 七月 27日 2022, 8:58:57 晚上","修改时间":"星期四, 七月 28日 2022, 1:18:29 下午"},"headers":[{"level":2,"title":"枚举的定义","slug":"枚举的定义","link":"#枚举的定义","children":[]},{"level":2,"title":"枚举成员","slug":"枚举成员","link":"#枚举成员","children":[]},{"level":2,"title":"常数枚举","slug":"常数枚举","link":"#常数枚举","children":[]}],"relativePath":"工作区/框架技术/TypeScript/枚举.md"}'),i={name:"工作区/框架技术/TypeScript/枚举.md"},n=r('<p>#枚举 #Enum</p><h1 id="枚举的笔记" tabindex="-1">枚举的笔记 <a class="header-anchor" href="#枚举的笔记" aria-hidden="true">#</a></h1><h2 id="枚举的定义" tabindex="-1">枚举的定义 <a class="header-anchor" href="#枚举的定义" aria-hidden="true">#</a></h2><p>枚举是通过<code>enum</code>关键字来定义，使用枚举我们可以定义一些有名字的数字常量。</p><blockquote><p>枚举的本质是“有名字的数字常量”。由此可见，它是数字常量的变种，这是需要大家注意的地方。</p></blockquote><h2 id="枚举成员" tabindex="-1">枚举成员 <a class="header-anchor" href="#枚举成员" aria-hidden="true">#</a></h2><p>一个枚举类型可以包含零个或多个枚举成员。枚举成员具有一个数字值，它可以是常数或是计算得出的值。当满足如下条件时，枚举成员被当作是常数： （1）没有进行初始化赋值并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加1。但是，第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为0。 （2）枚举成员使用常数枚举表达式初始化。常数枚举表达式是TypeScript表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：</p><h2 id="常数枚举" tabindex="-1">常数枚举 <a class="header-anchor" href="#常数枚举" aria-hidden="true">#</a></h2><p>枚举是在运行时真正存在的一个对象。其中一个原因是因为这样可以从枚举值到枚举名进行反向映射。</p>',9),c=[n];function d(l,s,h,o,_,p){return t(),a("div",null,c)}const m=e(i,[["render",d]]);export{f as __pageData,m as default};
